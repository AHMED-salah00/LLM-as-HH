Code description: This code implements a novel selecting-next-node function called "HybridACO". It combines the attractiveness calculation from Algorithm 1 with the edge selection method from Algorithm 2. This hybrid approach aims to leverage the advantages of both algorithms to improve the performance of the solution construction process.

```python
import numpy as np

def select_next_node(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    # Initialize parameters
    alpha = 1.0
    beta = 1.0
    pheromone_matrix = np.full_like(distance_matrix, 0.01)  # Initialize pheromone matrix with small values

    # Calculate attractiveness of each unvisited node based on pheromone level and distance
    attractiveness = np.exp(-alpha * distance_matrix[current_node, list(unvisited_nodes)] + beta * pheromone_matrix[current_node, list(unvisited_nodes)])

    # Calculate probability distribution for selecting the next node
    probability = attractiveness / np.sum(attractiveness)

    # Select next node based on probability distribution
    nxt_node = np.random.choice(list(unvisited_nodes), p=probability)

    return nxt_node
```

