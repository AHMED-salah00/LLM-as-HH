Code description: 

The crossover algorithm combines elements from both Algorithm 1 and Algorithm 2 to create a novel scoring function. It calculates the heuristic score for each edge based on the distance between nodes, the demand of nodes, and the vehicle capacity. The heuristic score is calculated as the product of the normalized distance, the normalized demand ratio, and the normalized remaining capacity ratio. The remaining capacity is calculated as the difference between the vehicle capacity and the cumulative demand of the nodes visited so far. The normalization is done by dividing the values by their maximum possible values.

```python
import numpy as np

def scoring_function(distance_matrix: np.ndarray, demands: np.ndarray, CAPACITY: int) -> np.ndarray:
    n_nodes = distance_matrix.shape[0]
    
    max_distance = np.max(distance_matrix)
    max_demand = np.max(demands[1:])
    max_capacity = CAPACITY
    
    cumulative_demands = np.zeros(n_nodes)
    remaining_capacities = np.zeros(n_nodes)
    
    heuristics = np.zeros((n_nodes, n_nodes))
    
    for i in range(1, n_nodes):
        cumulative_demands[i] = cumulative_demands[i-1] + demands[i]
        remaining_capacities[i] = CAPACITY - cumulative_demands[i]
    
    for i in range(1, n_nodes):
        for j in range(1, n_nodes):
            if i == j:
                continue
            
            distance = distance_matrix[i, j]
            demand_ratio = demands[j] / max_demand
            remaining_capacity_ratio = remaining_capacities[j] / max_capacity
            
            normalized_distance = distance / max_distance
            normalized_demand_ratio = demand_ratio
            normalized_remaining_capacity_ratio = remaining_capacity_ratio
            
            heuristics[i, j] = normalized_distance * normalized_demand_ratio * normalized_remaining_capacity_ratio
    
    return heuristics
```

