Code description: The proposed scoring function aims to prioritize edges based on both the distance and demand considerations. It calculates the heuristic measure for each edge as the product of the normalized distance and the ratio of the demands of the two nodes connected by the edge. The normalization is done by dividing the values by their maximum possible values.

```python
import numpy as np

def scoring_function(distance_matrix, demands, CAPACITY):
    n_nodes = distance_matrix.shape[0]
    
    max_distance = np.max(distance_matrix)
    max_demand = np.max(demands[1:])
    
    heuristics = np.zeros((n_nodes, n_nodes))
    
    for i in range(1, n_nodes):
        for j in range(1, n_nodes):
            if i == j:
                continue
            
            distance = distance_matrix[i, j]
            demand_ratio = demands[j] / CAPACITY
            
            normalized_distance = distance / max_distance
            normalized_demand_ratio = demands[i] / max_demand
            
            heuristics[i, j] = normalized_distance * normalized_demand_ratio
    
    return heuristics
```

