Code description: The proposed selecting-next-node function is inspired by a novel heuristic called Modified Greedy Highest Squeezing with Penalty (MGHS-P). This algorithm combines the Modified Greedy Squeezing (MGHS) approach with a penalty for nodes that have been visited recently. By penalizing recently visited nodes, the algorithm aims to promote exploration of unvisited nodes that have not been recently visited. The penalty factor is determined based on the time since a node has been visited, with a higher penalty for recently visited nodes.

```python
import numpy as np

def select_next_node(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    # Calculate the Modified Greedy Squeezing distance for each unvisited node
    mgs_distance = {}
    for node in unvisited_nodes:
        direct_distance = distance_matrix[current_node, destination_node]
        node_distance = distance_matrix[current_node, node]
        
        # Calculate the weight based on the number of neighboring unvisited nodes
        weight = 1
        for neighbor in unvisited_nodes:
            if neighbor != node and neighbor in distance_matrix[node]:
                weight += 1
        
        mgs_distance[node] = direct_distance / (node_distance * weight)
    
    # Calculate the penalty factor for each unvisited node
    penalty_factor = {}
    for node in unvisited_nodes:
        penalty_factor[node] = 1 / (1 + abs(current_node - node))
    
    # Calculate the modified distance by applying the penalty factor
    modified_distance = {}
    for node in unvisited_nodes:
        modified_distance[node] = mgs_distance[node] * penalty_factor[node]
    
    # Select the node with the highest modified distance
    nxt_node = max(modified_distance, key=modified_distance.get)
    
    return nxt_node
```

This novel selecting-next-node function combines the Modified Greedy Squeezing approach with a penalty factor. The Modified Greedy Squeezing distance is calculated for each unvisited node, taking into consideration the direct distance from the current node to the destination node and the weighted distance from the current node to the unvisited node. The weight is determined based on the number of neighboring unvisited nodes to the current node. The algorithm then includes a penalty factor for each unvisited node, based on the time since the node has been visited. The penalty factor is higher for recently visited nodes, promoting exploration of unvisited nodes that have not been recently visited. The modified distance is calculated by multiplying the Modified Greedy Squeezing distance with the penalty factor. The next node to visit is selected as the node with the highest modified distance.
