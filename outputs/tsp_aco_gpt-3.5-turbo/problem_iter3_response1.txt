Code description:

In this improved version of the scoring function, I propose to combine the edge centrality measure from Algorithm 1 and the hop count measure from Algorithm 2. The centrality score considers the sum of distances to other nodes, while the hop count measures the number of hops required to reach each node. By combining these measures with the normalized heuristic measures, we can obtain a more robust and effective scoring function.

```python
import numpy as np

def scoring_function(distance_matrix: np.ndarray) -> np.ndarray:
    """
    The heuristic measures indicate how promising is each edge before actually solving this TSP instance.
    
    Parameters
    ----------
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes), where diagonal elements are set to inf.
    
    Returns
    -------
    heuristics: np.ndarray
        The heuristic measures of shape (n_nodes, n_nodes) for all edges. 
    """
    n_nodes = distance_matrix.shape[0]
    heuristics = np.zeros((n_nodes, n_nodes))

    # Compute the inverse distances
    inverse_distances = 1 / distance_matrix
    np.fill_diagonal(inverse_distances, 0)
    
    # Compute the sum of distances to other nodes for each node
    node_scores = np.sum(inverse_distances, axis=1)

    # Compute edge centrality score
    centrality_score = np.sum(inverse_distances, axis=1) / np.sum(inverse_distances)
    
    # Compute hop count between nodes
    hop_count = np.zeros((n_nodes, n_nodes))
    for hop in range(1, n_nodes):
        hop_count += (distance_matrix <= hop)

    # Compute normalized heuristic measures
    normalized_heuristics = inverse_distances / np.sum(inverse_distances, axis=1, keepdims=True)
    
    for i in range(n_nodes):
        for j in range(n_nodes):
            if i != j:
                # Combine centrality score, hop count, and normalized heuristic measures
                heuristic = centrality_score[i] * hop_count[i, j] * normalized_heuristics[i, j]
                heuristics[i, j] = heuristic
    
    return heuristics
```

