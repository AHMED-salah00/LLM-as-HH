Code description: In this code, I propose a novel selecting-next-node function called "Distance-based Node Scoring". This heuristic takes into account the distance from the current node to each unvisited node and scores each unvisited node based on this distance. The node with the highest score is selected as the next node to visit.

```python
import numpy as np

def select_next_node(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """
    Select the next node to visit from the unvisited nodes.
    
    Parameters
    ----------
    current_node : int
        The current node.
    destination_node : int
        The destination node to return to.
    unvisited_nodes : set
        The set of unvisited nodes.
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes).
    
    Returns
    -------
    nxt_node : int
        The next node to visit.
    """
    # Calculate distance from current node to each unvisited node
    current_distances = distance_matrix[current_node, list(unvisited_nodes)]
    
    # Normalize distances to range [0, 1]
    norm_distances = (current_distances - np.min(current_distances)) / (np.max(current_distances) - np.min(current_distances))
    
    # Score nodes based on distance
    scores = {}
    for node, distance in zip(unvisited_nodes, norm_distances):
        scores[node] = distance
    
    # Find the node with the highest score
    nxt_node = max(scores, key=scores.get)
    
    return nxt_node
```

The code first calculates the distance from the current node to each unvisited node. It then normalizes these distances to the range [0, 1] to ensure a balanced score. Each unvisited node is scored based on its normalized distance. Finally, the node with the highest score is selected as the next node to visit.
