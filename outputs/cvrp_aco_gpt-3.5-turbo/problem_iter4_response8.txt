Code description: In this crossover scoring function, I will consider the distance, demand, and position of each node to assign heuristic measures to each edge. I will use normalized values for distance and demand, and assign weight coefficients to each factor. Additionally, I will consider the remaining capacity of the vehicle. The heuristic measure for each edge will be a weighted sum of the normalized distance, demand ratio, position, and remaining capacity. If the demand ratio exceeds 1, indicating that the demand exceeds the vehicle capacity, the heuristic measure will be set to a very low value. I will initialize the heuristics matrix outside of the loop to improve efficiency.

```python
import numpy as np

def scoring_function(distance_matrix: np.ndarray, demands: np.ndarray, CAPACITY: int) -> np.ndarray:
    n_nodes = distance_matrix.shape[0]

    max_distance = np.max(distance_matrix)
    max_demand = np.max(demands[1:])
    
    heuristics = np.zeros((n_nodes, n_nodes))
    
    # Set weight coefficients for distance, demand, position, and remaining capacity
    distance_weight = 0.4
    demand_weight = 0.3
    position_weight = 0.2
    capacity_weight = 0.1

    for i in range(1, n_nodes):
        for j in range(i + 1, n_nodes):
            distance = distance_matrix[i, j]
            demand_ratio = demands[j] / CAPACITY
            remaining_capacity = CAPACITY - demands[j]

            if demand_ratio > 1:
                heuristics[i, j] = -max_distance
            else:
                normalized_distance = distance / max_distance
                normalized_demand_ratio = demand_ratio / max_demand
                normalized_position = (j - 1) / (n_nodes - 1)

                heuristics[i, j] = distance_weight * normalized_distance + demand_weight * normalized_demand_ratio + position_weight * normalized_position + capacity_weight * remaining_capacity
            
            # Symmetrically set heuristics for the lower triangle of the matrix
            heuristics[j, i] = heuristics[i, j]

    return heuristics
```

