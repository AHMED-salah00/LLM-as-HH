Code description: The crossover algorithm aims to combine the best features of Algorithm 1 and Algorithm 2 to create a more effective scoring function. This new scoring function will consider the distance, demand, and position of each node in order to assign heuristic measures to each edge. The weights assigned to distance, demand, and position can be customized to adjust the importance of each factor.

```python
import numpy as np

def scoring_function(distance_matrix: np.ndarray, demands: np.ndarray, CAPACITY: int) -> np.ndarray:
    n_nodes = distance_matrix.shape[0]

    max_distance = np.max(distance_matrix)
    max_demand = np.max(demands[1:])

    heuristics = np.zeros((n_nodes, n_nodes))

    for i in range(1, n_nodes):
        for j in range(i + 1, n_nodes):
            distance = distance_matrix[i, j]
            demand_ratio = demands[j] / CAPACITY

            normalized_distance = distance / max_distance
            normalized_demand_ratio = demand_ratio / max_demand
            normalized_position = (j - 1) / (n_nodes - 1)

            heuristic_distance = 0.5 * normalized_distance
            heuristic_demand = 0.3 * normalized_demand_ratio
            heuristic_position = 0.2 * normalized_position

            heuristics[i, j] = heuristic_distance + heuristic_demand + heuristic_position
            heuristics[j, i] = heuristics[i, j]

    return heuristics
```

This code implements a crossover between Algorithm 1 and Algorithm 2. It considers the distance, demand, and position of each node to assign heuristic measures to each edge. The weights assigned to distance, demand, and position are 0.5, 0.3, and 0.2, respectively. The distance and demand ratios are normalized by dividing them by the maximum distance and maximum demand, respectively. The position is normalized by dividing the node index by the number of nodes minus 1. The heuristic measure for each edge is calculated by multiplying the normalized distance, demand, and position with their respective weights and summing them up. The resulting heuristic measure is assigned to both the (i, j) and (j, i) entries of the heuristics matrix.
