Code description: The new scoring function combines elements from both Algorithm 1 and Algorithm 2. It calculates the inverse distances of each edge as the inverse of the distance matrix and computes the number of connections for each node. Then, it constructs a graph using the distance matrix and computes the number of common neighbors for each edge. Based on these calculations, it computes the edge importance measure by considering the importance of the endpoints and normalizes it. Finally, it calculates the heuristic measures by multiplying the edge importance measure with the inverse distances.

```python
import numpy as np
import networkx as nx

def scoring_function(distance_matrix: np.ndarray) -> np.ndarray:
    """
    The heuristic measures indicate how promising is each edge before actually solving this TSP instance.
    
    Parameters
    ----------
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes), where diagonal elements are set to inf.
    
    Returns
    -------
    heuristics: np.ndarray
        The heuristic measures of shape (n_nodes, n_nodes) for all edges. 
    """
    n_nodes = distance_matrix.shape[0]
    
    # Calculate the inverse distances
    inverse_distances = 1 / distance_matrix
    np.fill_diagonal(inverse_distances, 0)
    
    # Compute the degree of each node
    node_degrees = np.sum(distance_matrix != np.inf, axis=1)
    
    # Construct the graph using the distance matrix
    graph = nx.from_numpy_array(distance_matrix)
    
    # Compute the number of common neighbors for each edge
    common_neighbors = np.zeros((n_nodes, n_nodes), dtype=int)
    for i in range(n_nodes):
        for j in range(n_nodes):
            common_neighbors[i, j] = len(list(nx.common_neighbors(graph, i, j)))
    
    # Compute the edge importance measure
    edge_importance = (node_degrees[:, np.newaxis] + node_degrees) / (2 * np.max(node_degrees))
    edge_importance /= np.sum(edge_importance) # Normalize the edge importance measure
    
    # Calculate the heuristic measures
    heuristics = edge_importance * inverse_distances
    
    return heuristics
```
