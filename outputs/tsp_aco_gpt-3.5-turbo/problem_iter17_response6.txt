Code description: The proposed scoring function aims to improve the previous algorithms by considering both the average edge weight and the degree centrality of each node. The average edge weight measures the average distance from a node to all other nodes, while the degree centrality measures the number of edges connected to each node. By combining these two measures, we can obtain a more comprehensive evaluation of each edge's potential usefulness in the TSP instance.

```python
import numpy as np

def scoring_function(distance_matrix: np.ndarray) -> np.ndarray:
    """
    The heuristic measures indicate how promising is each edge before actually solving this TSP instance.
    
    Parameters
    ----------
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes), where diagonal elements are set to inf.
    
    Returns
    -------
    heuristics: np.ndarray
        The heuristic measures of shape (n_nodes, n_nodes) for all edges. 
    """
    n_nodes = distance_matrix.shape[0]
    
    # Calculate the average edge weight
    average_edge_weight = np.average(distance_matrix, axis=1)
    
    # Compute the degree centrality of each node
    degree_centrality = np.sum(distance_matrix != np.inf, axis=1)
    
    # Combine the average edge weight and degree centrality measures
    combined_measure = average_edge_weight[:, np.newaxis] * degree_centrality
    
    # Calculate the heuristic measures
    heuristics = combined_measure / np.sum(combined_measure)
    
    return heuristics
```

