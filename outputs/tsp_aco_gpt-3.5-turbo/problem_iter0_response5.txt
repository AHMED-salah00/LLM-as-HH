Code description: This code computes the heuristic measures for the TSP problem based on the distance matrix. The heuristic measure for each edge will be higher if the distance between the corresponding nodes is shorter. 

```python
import numpy as np
from scipy.spatial.distance import squareform

def scoring_function(distance_matrix):
    n_nodes = distance_matrix.shape[0]
    
    # Compute the inverse of the distance matrix
    inverse_distance_matrix = np.where(distance_matrix != 0, 1 / distance_matrix, 0)
    
    # Compute the sum of distances to other nodes for each node
    node_scores = np.sum(inverse_distance_matrix, axis=1)
    
    # Repeat the node scores for each edge
    edge_scores = np.repeat(node_scores[:, np.newaxis], n_nodes, axis=1)
    
    # Compute the heuristic measures for each edge
    heuristics = inverse_distance_matrix / edge_scores
    
    return heuristics
```

