Code description: In this modified scoring function, I will introduce a new factor called "degree centrality" to measure the importance of a node in the network. The degree centrality represents the number of edges connected to a node, indicating how connected and central it is in the graph. I will combine this degree centrality with the existing factors of distance, demand, and position. The weights of the factors will be adjusted to optimize their contributions to the final heuristic measures.

```python
import numpy as np
import networkx as nx

def scoring_function(distance_matrix: np.ndarray, demands: np.ndarray, CAPACITY: int) -> np.ndarray:
    n_nodes = distance_matrix.shape[0]
    
    heuristics = np.zeros((n_nodes, n_nodes))
    
    distance_weight = 0.4
    demand_weight = 0.2
    position_weight = 0.1
    degree_centrality_weight = 0.3
    
    # Calculate the degree centrality of nodes
    adjacency_matrix = np.where(distance_matrix > 0, 1, 0)
    G = nx.from_numpy_array(adjacency_matrix)
    degree_centrality_values = list(nx.degree_centrality(G).values())
    
    max_distance = np.max(distance_matrix)
    max_demand = np.max(demands[1:])
    max_degree_centrality = np.max(degree_centrality_values)
    
    for i in range(1, n_nodes):
        for j in range(i + 1, n_nodes):
            distance = distance_matrix[i, j]
            demand_ratio = demands[j] / CAPACITY
            position = j / (n_nodes - 1)
            degree_centrality = degree_centrality_values[j - 1]
            
            normalized_distance = distance / max_distance
            normalized_demand_ratio = demand_ratio / max_demand
            normalized_position = position
            normalized_degree_centrality = degree_centrality / max_degree_centrality
            
            heuristics[i, j] = (
                distance_weight * normalized_distance +
                demand_weight * normalized_demand_ratio +
                position_weight * normalized_position +
                degree_centrality_weight * normalized_degree_centrality
            )
            
            # Symmetrically set heuristics for the lower triangle of the matrix
            heuristics[j, i] = heuristics[i, j]
    
    return heuristics
```

