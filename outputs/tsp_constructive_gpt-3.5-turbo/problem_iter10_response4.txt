Code description: This code implements a selecting-next-node function using a novel constructive heuristic called "Semi-random Path Extension". The heuristic aims to balance exploration and exploitation by considering both random and greedy choices.

The idea behind this heuristic is to randomly select a few nodes from the set of unvisited nodes and calculate the distance between the current node and each of these randomly selected nodes. It then chooses the node with the minimum distance as the next node to visit. This approach allows for some exploration by randomly selecting nodes, while also exploiting the information from the distance matrix to make a more informed decision.

```python
import numpy as np
import random

def select_next_node(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    # Randomly select a few nodes for exploration
    num_random_nodes = min(5, len(unvisited_nodes))
    random_nodes = random.sample(unvisited_nodes, num_random_nodes)
    
    # Calculate the distance between the current node and each randomly selected node
    distances = []
    for node in random_nodes:
        distance = distance_matrix[current_node, node]
        distances.append((node, distance))
    
    # Sort the distances in ascending order
    distances.sort(key=lambda x: x[1])
    
    # Choose the node with the minimum distance as the next node to visit
    nxt_node = distances[0][0]
    
    return nxt_node
```
This algorithm balances exploration and exploitation by randomly selecting a few nodes for exploration while also using the information from the distance matrix to make a more informed decision.
