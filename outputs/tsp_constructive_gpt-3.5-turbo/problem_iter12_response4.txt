Code description: In this algorithm, I propose a modified version of the original selecting-next-node function that takes into account not only the direct distance from the current node to the destination node but also the average distance between the current node and the unvisited nodes.

The algorithm first calculates the direct distance from the current node to the destination node and stores it as the minimum distance. Then, for each unvisited node, it calculates the average distance from the current node to that node and updates the minimum distance if a smaller distance is found.

Finally, the algorithm selects the node with the smallest average distance as the next node to visit.

```python
import numpy as np

def select_next_node(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """
    Select the next node to visit from the unvisited nodes.
    
    Parameters
    ----------
    current_node : int
        The current node.
    destination_node : int
        The destination node to return to.
    unvisited_nodes : set
        The set of unvisited nodes.
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes).
    
    Returns
    -------
    nxt_node : int
        The next node to visit.
    """
    direct_distance = distance_matrix[current_node, destination_node]
    min_distance = direct_distance
    
    for node in unvisited_nodes:
        avg_distance = np.mean(distance_matrix[current_node, list(unvisited_nodes - set([node]))])
        min_distance = min(min_distance, avg_distance)
    
    nxt_node = min(unvisited_nodes, key=lambda node: np.mean(distance_matrix[current_node, list(unvisited_nodes - set([node]))]))
    
    return nxt_node
```

