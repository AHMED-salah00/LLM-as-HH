Code description: The code implements a selecting-next-node function using a novel constructive heuristic called "Dynamic Score". The idea behind this heuristic is to assign a dynamic score to each unvisited node based on two factors: the shortest distance to the node and the number of unvisited nodes that can be reached from that node. The function calculates the distances from the current node to all unvisited nodes and the number of reachable unvisited nodes from each unvisited node. It then assigns a score to each unvisited node based on these two factors. Finally, it selects the node with the highest score as the next node to visit.

```python
import numpy as np

def select_next_node(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    # Calculate distances from the current node to all unvisited nodes
    distances = distance_matrix[current_node, list(unvisited_nodes)]
    
    # Calculate the number of reachable unvisited nodes from each unvisited node
    reachable_nodes = np.sum(distance_matrix[list(unvisited_nodes),:], axis=1)
    
    # Calculate the score for each unvisited node (distance * reachable nodes)
    scores = distances * reachable_nodes
    
    # Select the node with the highest score
    nxt_node = list(unvisited_nodes)[np.argmax(scores)]
    
    return nxt_node
```
