Code description: This code implements a selecting-next-node function using a novel constructive heuristic called "Best of Both Worlds." The idea behind this heuristic is to combine the advantages of the Greedy Plus and Weighted Random Choice algorithms. The function first calculates the distances from the current node to all unvisited nodes. Then, it calculates the number of reachable unvisited nodes from each unvisited node. Next, for each unvisited node, it calculates a weight based on the distance to that node and the number of reachable unvisited nodes. Finally, it randomly selects a node using the weights as probabilities and returns it as the next node to visit.

```python
import numpy as np
import random

def select_next_node(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    # Calculate distances from the current node to all unvisited nodes
    distances = distance_matrix[current_node, list(unvisited_nodes)]
    
    # Calculate the number of reachable unvisited nodes from each unvisited node
    reachable_nodes = np.sum(distance_matrix[list(unvisited_nodes),:], axis=1)
    
    # Calculate the weights for each unvisited node based on distance and reachable nodes
    weights = 1 / distances + reachable_nodes
    
    # Normalize the weights to probabilities
    total_weight = sum(weights)
    probabilities = [weight / total_weight for weight in weights]
    
    # Randomly select a node using the probabilities as weights
    nxt_node = random.choices(list(unvisited_nodes), probabilities)[0]
    
    return nxt_node
```

