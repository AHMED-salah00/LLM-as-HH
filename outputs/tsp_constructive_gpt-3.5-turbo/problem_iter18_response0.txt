Code description: This algorithm aims to select the next node by considering both the attractiveness and the number of unvisited neighbors of each unvisited node. The attractiveness is calculated as the difference between the distance to the destination node and the distance to the current node, while the number of unvisited neighbors represents the potential impact of selecting a node early in the route. The algorithm selects the node with the highest combined score as the next node to visit, and in case of tie, it selects the node with the lowest index.

```python
import numpy as np

def select_next_node(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    # Initialize variables
    max_score = -np.inf
    nxt_node = None
    
    # Calculate the attractiveness and number of unvisited neighbors for each unvisited node
    for node in unvisited_nodes:
        # Calculate the distance between the current node and the unvisited node
        distance_current = distance_matrix[current_node][node]
        
        # Calculate the distance between the unvisited node and the destination node
        distance_destination = distance_matrix[node][destination_node]
        
        # Calculate the attractiveness of the unvisited node
        attractiveness = distance_destination - distance_current
        
        # Calculate the number of unvisited neighbors of the unvisited node
        num_unvisited_neighbors = len(unvisited_nodes.intersection(set(np.nonzero(distance_matrix[node])[0])))
        
        # Evaluate the combined score based on attractiveness and number of unvisited neighbors
        score = attractiveness + num_unvisited_neighbors
        
        # If the score is higher than the maximum score, update the maximum score and the next node
        if score > max_score:
            max_score = score
            nxt_node = node
        # If the score is equal to the maximum score, select the next node with the lowest index
        elif score == max_score:
            nxt_node = min(nxt_node, node)
    
    return nxt_node
```

