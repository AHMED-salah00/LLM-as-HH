Code description: 

The current algorithm clusters the unvisited nodes based on their distances to the current node and selects the cluster with the highest average distance to the destination node. From the selected cluster, it chooses the node with the shortest distance to the current node. 

To improve this algorithm, I will implement a novel constructive heuristic called "Nearest Cluster First". This heuristic starts by calculating the distances of unvisited nodes to the current node. It then selects the cluster with the nearest unvisited node to the current node and chooses the unvisited node from that cluster with the shortest distance to the current node.

Here is the modified code:

```python
import numpy as np
from sklearn.cluster import KMeans

def select_next_node(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    # Perform clustering on the unvisited nodes based on their distances to the current node
    distances_to_current = distance_matrix[current_node][list(unvisited_nodes)]
    kmeans = KMeans(n_clusters=int(np.sqrt(len(unvisited_nodes))), random_state=0).fit(distances_to_current.reshape(-1, 1))
    labels = kmeans.labels_

    # Create a dictionary to store the nodes in each cluster
    clusters = {}
    for i, node in enumerate(unvisited_nodes):
        cluster_label = labels[i]
        if cluster_label not in clusters:
            clusters[cluster_label] = set()
        clusters[cluster_label].add(node)

    # Select the cluster with the nearest unvisited node to the current node
    min_distance_to_current = np.inf
    nearest_cluster = None
    for cluster_label, cluster_nodes in clusters.items():
        nearest_node_distance = np.min(distance_matrix[current_node][list(cluster_nodes)])
        if nearest_node_distance < min_distance_to_current:
            min_distance_to_current = nearest_node_distance
            nearest_cluster = cluster_label

    # Select the node with the shortest distance to the current node from the nearest cluster
    min_distance = np.inf
    selected_node = None
    for node in clusters[nearest_cluster]:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            selected_node = node

    return selected_node
```

