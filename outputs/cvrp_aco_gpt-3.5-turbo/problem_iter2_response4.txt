Code description: 
In the improved scoring function, I will consider the distance and demand factors equally important and assign them equal weights. I will use a product-based approach to calculate the heuristic measure for each edge. The heuristic measure will be the product of the inverse of the distance and the demand ratio. If the demand ratio exceeds 1, indicating that the demand exceeds the vehicle capacity, the heuristic measure will be set to 0. Additionally, I will initialize the heuristics matrix outside of the loop to improve efficiency.

```python
import numpy as np

def scoring_function(distance_matrix: np.ndarray, demands: np.ndarray, CAPACITY: int) -> np.ndarray:
    n_nodes = distance_matrix.shape[0]
    
    max_distance = np.max(distance_matrix)
    
    heuristics = np.zeros((n_nodes, n_nodes))
    
    for i in range(1, n_nodes):
        for j in range(i + 1, n_nodes):
            distance = distance_matrix[i, j]
            demand_ratio = demands[j] / CAPACITY
            
            if demand_ratio > 1:
                heuristics[i, j] = 0
            else:
                inverted_distance = 1 / distance
                heuristics[i, j] = inverted_distance * demand_ratio
            
            # Symmetrically set heuristics for the lower triangle of the matrix
            heuristics[j, i] = heuristics[i, j]
    
    return heuristics
```

