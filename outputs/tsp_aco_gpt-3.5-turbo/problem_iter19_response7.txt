Code description: This improved scoring function combines the ideas from Algorithm 1 and Algorithm 2 to create a better scoring function. Unlike the previous algorithm, it takes into account both the inverse distance between nodes and the number of connections of the destination node. It uses a sigmoid function to calculate the attractiveness of an edge, with the sigmoid function's shape controlled by a parameter that determines the importance of the number of connections.

```python
import numpy as np
import math

def scoring_function(distance_matrix: np.ndarray) -> np.ndarray:
    """
    The heuristic measures indicate how promising is each edge before actually solving this TSP instance.
    
    Parameters
    ----------
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes), where diagonal elements are set to inf.
    
    Returns
    -------
    heuristics: np.ndarray
        The heuristic measures of shape (n_nodes, n_nodes) for all edges. 
    """
    n_nodes = distance_matrix.shape[0]
    
    # Calculate the inverse distances
    inverse_distances = 1 / (distance_matrix + 1e-10)
    np.fill_diagonal(inverse_distances, 0)
    
    # Initialize the attractiveness matrix
    attractiveness = np.zeros((n_nodes, n_nodes))
    
    # Calculate the attractiveness for each edge using a sigmoid function
    for i in range(n_nodes):
        for j in range(n_nodes):
            if i != j:
                attractiveness[i, j] = inverse_distances[i, j] * sigmoid(np.count_nonzero(distance_matrix[j]))
    
    # Normalize the attractiveness values so that they sum up to 1
    attractiveness /= np.sum(attractiveness)
    
    return attractiveness

def sigmoid(x):
    return 1 / (1 + math.exp(-x))
```
In this modified code, I replaced the product of the inverse distance and the sigmoid function with the inverse distance multiplied by the sigmoid of the number of connections. This change ensures that the edge attractiveness takes into account both the inverse distance and the number of connections, with the sigmoid function allowing for non-linear relationship between them. Additionally, I removed the addition of 1 inside the sigmoid function to avoid unnecessary scaling of the sigmoid output.
