Code description: For this improved scoring function, I will modify the calculation of the heuristic measures. Instead of multiplying the inverse distances with the heuristic measure of the destination node, I will use a new scoring formula. The new formula will consider the inverse distance, the number of connections of the destination node, and a weight factor. The weight factor will be a linear combination of the inverse distance and the inverse number of connections, with a higher weight given to the inverse distance. This new scoring formula aims to balance the importance of distance and number of connections, emphasizing shorter distances while still prioritizing nodes with fewer connections.

```python
import numpy as np

def scoring_function(distance_matrix: np.ndarray) -> np.ndarray:
    """
    The heuristic measures indicate how promising is each edge before actually solving this TSP instance.
    
    Parameters
    ----------
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes), where diagonal elements are set to inf.
    
    Returns
    -------
    heuristics: np.ndarray
        The heuristic measures of shape (n_nodes, n_nodes) for all edges. 
    """
    n_nodes = distance_matrix.shape[0]
    
    # Calculate the inverse distances
    inverse_distances = 1 / distance_matrix
    np.fill_diagonal(inverse_distances, 0)
    
    # Initialize the node connections matrix
    node_connections = np.zeros(n_nodes, dtype=int)
    
    # Count the number of connections for each node
    for i in range(n_nodes):
        node_connections[i] = np.count_nonzero(distance_matrix[i])
    
    # Initialize the heuristic measures matrix
    heuristics = np.zeros((n_nodes, n_nodes))
    
    # Calculate the heuristic measure for each edge
    for i in range(n_nodes):
        for j in range(n_nodes):
            if i != j:
                # Calculate the weight factor
                weight_factor = inverse_distances[i, j] + (1 / node_connections[j])
                # Calculate the heuristic measure using the weight factor
                heuristics[i, j] = inverse_distances[i, j] * weight_factor
    
    # Normalize the heuristic measures so that they sum up to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```

