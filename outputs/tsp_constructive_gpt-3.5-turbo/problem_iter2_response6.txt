Code description: The code uses a novel constructive heuristic called "Combined Distance". This heuristic combines the distances from the current node to each unvisited node and the distances from the destination node to each unvisited node. The node with the minimum combined distance is selected as the next node to visit.

```python
import numpy as np

def select_next_node(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    # Calculate the distances from the current node to each unvisited node
    curr_distances = distance_matrix[current_node, list(unvisited_nodes)]
    
    # Calculate the distances from the destination node to each unvisited node
    dest_distances = distance_matrix[destination_node, list(unvisited_nodes)]
    
    # Combine the distances by adding the current distances and the destination distances
    combined_distances = curr_distances + dest_distances
    
    # Find the index of the node with the minimum combined distance
    min_index = np.argmin(combined_distances)
    
    # Get the corresponding node number
    nxt_node = list(unvisited_nodes)[min_index]
    
    return nxt_node
```

