Code description:

In this novel algorithm, we will select the next node based on the distance score and the number of unvisited neighbors score. We will calculate a score for each unvisited node using these two factors, and then select the node with the highest score as the next node to visit.

```python
import numpy as np

def select_next_node(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    # Initialize variables
    max_score = -np.inf
    nxt_node = None

    # Calculate the number of unvisited neighbors for each unvisited node
    num_unvisited_neighbors = np.zeros(len(distance_matrix))
    for node in unvisited_nodes:
        num_unvisited_neighbors[node] = np.sum(distance_matrix[node, :] > 0)

    # Calculate the score for each unvisited node
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        distance_score = 1 / distance
        num_unvisited_neighbors_score = num_unvisited_neighbors[node]

        score = distance_score + num_unvisited_neighbors_score
        
        if score > max_score:
            max_score = score
            nxt_node = node

    return nxt_node
```
The novel algorithm simplifies Algorithm 2 by considering only two factors: distance and the number of unvisited neighbors. This simplification aims to reduce the complexity and increase the efficiency of the heuristic while still considering important factors in the selection of the next node.
