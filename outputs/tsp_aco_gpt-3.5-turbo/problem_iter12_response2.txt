Code description: In this improved scoring function, I will incorporate both the edge importance measure and the total centrality measure from Algorithm 2. The edge importance measure captures the significance of each edge based on the importance of its endpoints, while the total centrality measure captures the overall centrality of the destination node based on the inverse distances to all other nodes. By combining these measures, the scoring function aims to provide a comprehensive evaluation of each edge's potential usefulness in the TSP instance.

```python
import numpy as np

def scoring_function(distance_matrix: np.ndarray) -> np.ndarray:
    """
    The heuristic measures indicate how promising is each edge before actually solving this TSP instance.

    Parameters
    ----------
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes), where diagonal elements are set to inf.

    Returns
    -------
    heuristics: np.ndarray
        The heuristic measures of shape (n_nodes, n_nodes) for all edges. 
    """
    n_nodes = distance_matrix.shape[0]
    
    # Compute the inverse of the distance matrix
    inverse_distance_matrix = np.where(distance_matrix != 0, 1 / distance_matrix, 0)
    
    # Compute the degree centrality of each node
    degree_centrality = np.sum(inverse_distance_matrix, axis=1) / (n_nodes - 1)
    
    # Compute the total centrality of each node
    total_centrality = np.sum(inverse_distance_matrix, axis=1) / np.sum(inverse_distance_matrix)
    
    # Compute the edge importance measure
    edge_importance = inverse_distance_matrix * (degree_centrality[:, np.newaxis] + degree_centrality[np.newaxis, :])
    
    # Compute the total centrality measure
    total_centrality_matrix = total_centrality[:, np.newaxis] * np.ones((n_nodes, n_nodes))
    
    # Calculate the heuristic measures
    heuristics = edge_importance * total_centrality_matrix
    
    # Normalize the heuristic measures so that they sum up to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```

