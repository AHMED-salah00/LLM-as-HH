-----
Code description: The code implements a novel heuristic called Weighted Distance and Degree. This heuristic selects the next node to visit based on the distance from the current node to each unvisited node, weighted by the degree of each unvisited node. The node with the highest weighted distance is selected as the next node to visit.

```python
import numpy as np

def select_next_node(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """
    Select the next node to visit from the unvisited nodes using the Weighted Distance and Degree heuristic.
    
    Parameters
    ----------
    current_node : int
        The current node.
    destination_node : int
        The destination node to return to.
    unvisited_nodes : set
        The set of unvisited nodes.
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes).
    
    Returns
    -------
    nxt_node : int
        The next node to visit.
    """
    
    n_nodes = len(distance_matrix)
    
    # Calculate the degree for each unvisited node
    degree = np.zeros(n_nodes)
    for node in unvisited_nodes:
        degree[node] = np.sum(distance_matrix[node,:] > 0)
    
    # Calculate the weighted distances from the current node to each unvisited node
    weighted_distances = np.zeros(n_nodes)
    for node in unvisited_nodes:
        weighted_distances[node] = distance_matrix[current_node, node] * degree[node]
    
    # Select the node with the highest weighted distance as the next node to visit
    nxt_node = np.argmax(weighted_distances)
    
    return nxt_node
```
-----
