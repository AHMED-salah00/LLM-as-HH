Code description: 

The modified scoring function aims to improve the effectiveness of the heuristic by considering the distance between nodes and the demand of nodes, as well as the current utilization of the vehicle's capacity. The heuristic score for an edge is calculated as the product of the inverse of the distance, the ratio of the demand of the destination node to the vehicle capacity, and the ratio of the remaining capacity of the vehicle to the total capacity. This scoring function prioritizes edges with shorter distances, nodes with higher demands, and edges that have lower remaining capacity in the vehicle.

```python
import numpy as np

def scoring_function(distance_matrix: np.ndarray, demands: np.ndarray, CAPACITY: int) -> np.ndarray:
    n_nodes = distance_matrix.shape[0]
    
    # Initialize heuristics matrix
    heuristics = np.zeros((n_nodes, n_nodes))
    
    # Set a very large number for diagonal elements of distance matrix
    np.fill_diagonal(distance_matrix, np.inf)

    # Calculate remaining capacity for each node
    remaining_capacity = CAPACITY - demands
    
    # Calculate heuristic measures for each edge
    for i in range(n_nodes):
        for j in range(i+1, n_nodes):
            distance = distance_matrix[i, j]
            demand = demands[j]
            remaining_cap = remaining_capacity[i]
            
            # Calculate heuristic score
            if demand <= remaining_cap:
                score = (1 / distance) * (demand / CAPACITY) * (remaining_cap / CAPACITY)
            else:
                score = 0
            
            # Update heuristics matrix
            heuristics[i, j] = score
    
    # Symmetrically set heuristics for the lower triangle of the matrix
    heuristics += np.tril(heuristics.T, -1)
    
    return heuristics
```

