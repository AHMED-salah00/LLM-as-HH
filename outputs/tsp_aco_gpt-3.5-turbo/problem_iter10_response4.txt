Code description: In this improved scoring function, I will combine the ideas from Algorithm 1 and Algorithm 2 to create a better scoring function. First, I will compute the shortest path lengths between all nodes using the Floyd-Warshall algorithm, similar to Algorithm 1. Then, I will calculate the node degrees, similar to Algorithm 2. Finally, I will combine these measures to compute the heuristic measures for each edge. Additionally, I will normalize the heuristic measures so that they sum up to 1 to ensure that the heuristics can be interpreted as probabilities.

```python
import numpy as np

def scoring_function(distance_matrix: np.ndarray) -> np.ndarray:
    """
    The heuristic measures indicate how promising is each edge before actually solving this TSP instance.

    Parameters
    ----------
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes), where diagonal elements are set to inf.

    Returns
    -------
    heuristics: np.ndarray
        The heuristic measures of shape (n_nodes, n_nodes) for all edges.
    """

    n_nodes = distance_matrix.shape[0]

    # Compute the shortest path lengths between all nodes using Floyd-Warshall algorithm
    shortest_paths = np.copy(distance_matrix)
    for k in range(n_nodes):
        for i in range(n_nodes):
            for j in range(n_nodes):
                shortest_paths[i, j] = min(shortest_paths[i, j], shortest_paths[i, k] + shortest_paths[k, j])

    # Compute the node degrees
    node_degrees = np.count_nonzero(distance_matrix, axis=1)

    # Calculate the heuristic measures
    heuristics = np.zeros((n_nodes, n_nodes))
    for i in range(n_nodes):
        for j in range(n_nodes):
            if i != j:
                # Combine shortest path lengths, node degrees, and inverse distance
                heuristic_measure = 1 / ((shortest_paths[i, j] ** 2) * node_degrees[i])
                heuristics[i, j] = heuristic_measure

    # Normalize the heuristic measures so that they sum up to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```

This improved scoring function combines the concepts from Algorithm 1 and Algorithm 2. It first computes the shortest path lengths between all nodes using the Floyd-Warshall algorithm. Then, it calculates the node degrees by counting the number of non-zero elements in each row of the distance matrix. Finally, it combines the shortest path lengths, node degrees, and inverse distance to compute the heuristic measures for each edge. The heuristic measures are then normalized to ensure that they sum up to 1.
