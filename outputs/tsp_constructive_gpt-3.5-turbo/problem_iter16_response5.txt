Code description: The crossover algorithm selects the next node based on both the distance to the node and the number of unvisited neighbors. It calculates a score for each unvisited node using these factors and selects the node with the highest score as the next node to visit. Additionally, it introduces a random element by considering multiple nodes with the highest score and randomly selecting one of them.

```python
import numpy as np

def select_next_node(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    # Initialize variables
    max_score = -np.inf
    max_score_nodes = []
    weight = 0.5
    
    # Calculate the score for each unvisited node
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        num_unvisited_neighbors = np.sum(distance_matrix[node,:] > 0)
        score = (1 - weight) * distance - weight * num_unvisited_neighbors
        
        if score > max_score:
            max_score = score
            max_score_nodes = [node]
        elif score == max_score:
            max_score_nodes.append(node)
    
    # Randomly select one of the nodes with the highest score
    nxt_node = np.random.choice(max_score_nodes)
    
    return nxt_node
```

