Code description: The following code implements a novel heuristic called "Nearest Neighbors with Distance Constraints" for the Traveling Salesman Problem. In this heuristic, the next node to visit is selected based on its proximity to the current node, taking into account distance constraints. The code calculates the distances from the current node to all unvisited nodes and selects the node with the shortest distance that satisfies a given threshold constraint.

```python
import numpy as np

def select_next_node(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """
    Select the next node to visit from the unvisited nodes using the Nearest Neighbors with Distance Constraints heuristic.
    
    Parameters
    ----------
    current_node : int
        The current node.
    destination_node : int
        The destination node to return to.
    unvisited_nodes : set
        The set of unvisited nodes.
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes).
    
    Returns
    -------
    nxt_node : int
        The next node to visit.
    """
    
    # Set the maximum distance threshold for node selection
    distance_threshold = 100
    
    # Calculate the distances from the current node to all unvisited nodes
    node_distances = distance_matrix[current_node, list(unvisited_nodes)]
    
    # Select the node with the shortest distance that satisfies the distance threshold
    valid_nodes = [node for node, distance in zip(list(unvisited_nodes), node_distances) if distance <= distance_threshold]
    
    if len(valid_nodes) > 0:
        nxt_node = valid_nodes[np.argmin(node_distances[node_distances <= distance_threshold])]
    else:
        # If there are no nodes that satisfy the distance threshold, select the one with the shortest distance
        nxt_node = list(unvisited_nodes)[np.argmin(node_distances)]
    
    return nxt_node
```

In this code, I have introduced a distance constraint to the node selection process. The heuristic selects the node with the shortest distance that satisfies a given distance threshold. This ensures that the selected node is not too far away from the current node, helping to avoid potentially inefficient routes.
