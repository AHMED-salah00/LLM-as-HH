Code description: The proposed selecting-next-node function is inspired by a novel heuristic called Modified Greedy Highest Squeezing (MGHS). The algorithm selects the next node based on the Modified Greedy Squeezing distance calculated for each unvisited node. The Modified Greedy Squeezing distance is defined as the ratio between the direct distance from the current node to the destination node and the weighted distance from the current node to the unvisited node. The weight is determined based on the number of neighboring unvisited nodes to the current node. By considering the number of neighboring unvisited nodes, the algorithm aims to select nodes that have a higher potential for further exploration.

```python
import numpy as np

def select_next_node(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    # Calculate the Modified Greedy Squeezing distance for each unvisited node
    mgs_distance = {}
    for node in unvisited_nodes:
        direct_distance = distance_matrix[current_node, destination_node]
        node_distance = distance_matrix[current_node, node]
        
        # Calculate the weight based on the number of neighboring unvisited nodes
        weight = 1
        for neighbor in unvisited_nodes:
            if neighbor != node and neighbor in distance_matrix[node]:
                weight += 1
        
        mgs_distance[node] = direct_distance / (node_distance * weight)
    
    # Select the node with the highest Modified Greedy Squeezing distance
    nxt_node = max(mgs_distance, key=mgs_distance.get)
    
    return nxt_node
```

