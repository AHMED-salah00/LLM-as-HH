Code description: In this improved scoring function, I will combine the ideas from Algorithm 1 and Algorithm 2. I will calculate the inverse distances of each edge from Algorithm 2 and incorporate the degree of nodes from Algorithm 1. The idea is to prioritize edges that have a short distance and connect to nodes with a lower degree, indicating that they are less connected and potentially easier to visit.

```python
import numpy as np

def scoring_function(distance_matrix: np.ndarray) -> np.ndarray:
    """
    The heuristic measures indicate how promising is each edge before actually solving this TSP instance.
    
    Parameters
    ----------
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes), where diagonal elements are set to inf.
    
    Returns
    -------
    heuristics: np.ndarray
        The heuristic measures of shape (n_nodes, n_nodes) for all edges. 
    """
    n_nodes = distance_matrix.shape[0]
    
    # Calculate the inverse distances
    inverse_distances = 1 / distance_matrix
    np.fill_diagonal(inverse_distances, 0)
    
    # Compute the degree of each node
    node_degrees = np.sum(distance_matrix != np.inf, axis=1)
    
    # Initialize the heuristic measures matrix
    heuristics = np.zeros((n_nodes, n_nodes))
    
    # Calculate the heuristic measure for each edge
    for i in range(n_nodes):
        for j in range(n_nodes):
            if i != j:
                heuristics[i, j] = inverse_distances[i, j] / (1 + node_degrees[j])
    
    # Normalize the heuristic measures so that they sum up to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
This code combines the inverse distances from Algorithm 2 with the node degrees from Algorithm 1. It first calculates the inverse distances by taking the element-wise reciprocal of the distance matrix, excluding the diagonal elements. Then it computes the degree of each node by counting the number of connections for each node. After initializing the heuristic measures matrix, it calculates the heuristic measure for each edge by dividing the inverse distance by 1 plus the degree of the destination node. Finally, it normalizes the heuristic measures so that they sum up to 1.
