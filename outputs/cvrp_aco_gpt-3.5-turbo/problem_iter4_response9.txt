Code description: This improved scoring function takes into consideration the distance, demand, and remaining capacity factors, along with the position of the edge in the tour. The heuristic measure for each edge will be the sum of these factors, with appropriate weights assigned to each. If the demand exceeds the vehicle capacity, the heuristic measure will be set to a very low value. The heuristics matrix is initialized outside of the loop for efficiency.

```python
import numpy as np

def scoring_function(distance_matrix: np.ndarray, demands: np.ndarray, CAPACITY: int) -> np.ndarray:
    n_nodes = distance_matrix.shape[0]
    max_distance = np.max(distance_matrix)
    
    heuristics = np.zeros((n_nodes, n_nodes))
    
    # Set weight coefficients for distance, demand, capacity, and position
    distance_weight = 0.4
    demand_weight = 0.4
    capacity_weight = 0.1
    position_weight = 0.1
    
    for i in range(1, n_nodes):
        for j in range(i + 1, n_nodes):
            distance = distance_matrix[i, j]
            demand_ratio = demands[j] / CAPACITY
            remaining_capacity = CAPACITY - demands[j]
            
            if demand_ratio > 1:
                heuristics[i, j] = -max_distance
            else:
                position = j / n_nodes
                heuristics[i, j] = (
                    distance_weight * distance +
                    demand_weight * demand_ratio +
                    capacity_weight * remaining_capacity +
                    position_weight * position
                )
            
            # Symmetrically set heuristics for the lower triangle of the matrix
            heuristics[j, i] = heuristics[i, j]
    
    return heuristics
```

