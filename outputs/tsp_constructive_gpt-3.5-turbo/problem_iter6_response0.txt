Code description: The following code implements a novel selecting-next-node function called "Probabilistic Score Selection".

The function selects the next node based on a probabilistic scoring mechanism that takes into account the distance from the current node to the unvisited node, the distance from the unvisited node to the destination node, and the distance from the current node to the destination node. 

The algorithm starts by initializing an empty list called scores to store the scores of each unvisited node. 

Then, for each unvisited node, the function calculates the score by summing the distance from the current node to the unvisited node, the distance from the unvisited node to the destination node, and the distance from the current node to the destination node. 

The function appends the inverted score (1/score) to the scores list.

Next, the function calculates the sum of all inverted scores.

Then, the function calculates the probabilities of selecting each unvisited node by dividing the inverted score of each node by the sum of all inverted scores.

Finally, the function selects the next node probabilistically by using the probabilities calculated above. Each unvisited node has a probability of being selected proportional to its inverse score.

The function returns the index of the selected node.

```python
import numpy as np

def select_next_node(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    scores = []

    for node in unvisited_nodes:
        score = distance_matrix[current_node, node] + distance_matrix[node, destination_node] + distance_matrix[current_node, destination_node]
        scores.append(1/score)

    scores_sum = sum(scores)

    probabilities = [score/scores_sum for score in scores]

    next_node_idx = np.random.choice(len(unvisited_nodes), p=probabilities)
    next_node = list(unvisited_nodes)[next_node_idx]

    return next_node
```
