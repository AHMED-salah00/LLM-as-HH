Code description: In this code, I propose a novel selecting-next-node algorithm that combines the ideas from both Algorithm 1 and Algorithm 2. The algorithm calculates a score for each unvisited node based on direct distance, destination distance, Modified Greedy Squeezing distance, and average neighbor distance. It then selects the node with the highest score as the next node to visit. Additionally, I introduce a weight factor to balance the importance of each score.

```python
import numpy as np

def select_next_node(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """
    Select the next node to visit from the unvisited nodes.
    
    Parameters
    ----------
    current_node : int
        The current node.
    destination_node : int
        The destination node to return to.
    unvisited_nodes : set
        The set of unvisited nodes.
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes).
    
    Returns
    -------
    nxt_node : int
        The next node to visit.
    """
    
    # Calculate direct distance from current node to each unvisited node
    direct_distances = distance_matrix[current_node, list(unvisited_nodes)]
    
    # Calculate distance from destination node to each unvisited node
    destination_distances = distance_matrix[destination_node, list(unvisited_nodes)]
    
    # Calculate Modified Greedy Squeezing distance for each unvisited node
    mgs_distance = {}
    for node in unvisited_nodes:
        direct_distance = distance_matrix[current_node, destination_node]
        node_distance = distance_matrix[current_node, node]
        
        # Calculate the weight based on the number of neighboring unvisited nodes
        weight = 1
        for neighbor in unvisited_nodes:
            if neighbor != node and neighbor in distance_matrix[node]:
                weight += 1

        mgs_distance[node] = direct_distance / (node_distance * weight)
        
    # Calculate average neighbor distance for each unvisited node
    neighbor_distance = {}
    for node in unvisited_nodes:
        neighbor_distances = distance_matrix[node, list(unvisited_nodes - set([node]))]
        neighbor_distance[node] = np.mean(neighbor_distances)
        
    # Calculate combined scores for each unvisited node
    combined_scores = 0.4 * direct_distances + 0.3 * destination_distances + 0.2 * np.array(list(mgs_distance.values())) + 0.1 * np.array(list(neighbor_distance.values()))
    
    # Find the node with the highest combined score
    nxt_node = list(unvisited_nodes)[np.argmax(combined_scores)]
    
    return nxt_node
```

The proposed algorithm combines the idea of considering direct distance, destination distance, Modified Greedy Squeezing distance, and average neighbor distance to select the next node to visit. It calculates scores for each unvisited node based on these factors and selects the node with the highest score as the next node. The weights for each factor are set to combine the scores effectively.
