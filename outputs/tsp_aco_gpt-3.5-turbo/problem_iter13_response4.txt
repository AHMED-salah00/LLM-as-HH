Code description: 

In this improved version, I propose a new scoring function that combines the ideas from both Algorithm 1 and Algorithm 2. The scoring function calculates the inverse distances and the node connections as in Algorithm 2. Then, it calculates the heuristic measures for each edge by taking into account the inverse distances and a modification factor based on the number of connections for both the source and destination nodes. The modification factor is calculated as the product of the inverse distance between the nodes and the inverse sum of their connection counts. Finally, the heuristics are normalized to sum up to 1.

```python
import numpy as np

def scoring_function(distance_matrix: np.ndarray) -> np.ndarray:
    """
    The heuristic measures indicate how promising is each edge before actually solving this TSP instance.
    
    Parameters
    ----------
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes), where diagonal elements are set to inf.
    
    Returns
    -------
    heuristics: np.ndarray
        The heuristic measures of shape (n_nodes, n_nodes) for all edges. 
    """
    n_nodes = distance_matrix.shape[0]
    
    # Initialize the heuristic measures matrix
    heuristics = np.zeros((n_nodes, n_nodes))
    
    # Calculate the inverse distances
    inverse_distances = 1 / distance_matrix
    np.fill_diagonal(inverse_distances, 0)
    
    # Compute the node connections
    node_connections = np.sum(distance_matrix != np.inf, axis=1)
    
    # Calculate the heuristic measure for each edge
    for i in range(n_nodes):
        for j in range(n_nodes):
            if i != j:
                mod_factor = inverse_distances[i, j] / (inverse_distances[i, j] * (1 + node_connections[i] + node_connections[j]))
                heuristics[i, j] = inverse_distances[i, j] * mod_factor
    
    # Normalize the heuristic measures so that they sum up to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```

Note: In this new scoring function, I made a change from Algorithm 2 where I calculated the modification factor as the product of the inverse distance between the nodes and the inverse sum of their connection counts. I believe that this modification factor provides a better balance between the distance information and the node connectivity information. This leads to a more effective scoring function for optimization heuristics.
