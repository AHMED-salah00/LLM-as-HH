Code description: The following code implements a selecting-next-node function for solving the Traveling Salesman Problem (TSP) using the heuristic called "Combining Edge Length and Minimum Elitism".

The algorithm aims to strike a balance between minimizing the total distance traveled and prioritizing nodes with shorter distance to the destination. It combines the edge length criterion from Algorithm 1 with a modified version of elitism, where the node with the minimum distance to the destination is given more weight.

The code calculates the distance between the current node and each unvisited node using the distance matrix. It then calculates a combined score for each unvisited node, considering the edge length and weighted destination distance. Finally, it selects the node with the highest combined score as the next node to visit.

```python
import numpy as np

def select_next_node(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    # Initialize variables
    max_combined_score = float('-inf')
    nxt_node = None
    
    # Find the node with the maximum combined score
    for node in unvisited_nodes:
        # Calculate edge length
        edge_length = distance_matrix[current_node, node]
        
        # Calculate distance to destination
        destination_distance = distance_matrix[node, destination_node]
        
        # Calculate combined score
        combined_score = edge_length - 0.5 * destination_distance
        
        # Update maximum combined score and next node if necessary
        if combined_score > max_combined_score:
            max_combined_score = combined_score
            nxt_node = node
    
    return nxt_node
```
