Code description: 
The scoring function I am going to design is called Random Heuristics Scoring. It assigns random heuristic values to each edge in the distance matrix. The heuristic values are drawn from a uniform distribution. This scoring function does not take into account any information about the partial solutions and simply assigns random heuristic values to each edge.

```python
import numpy as np

def scoring_function(distance_matrix: np.ndarray) -> np.ndarray:
    """
    The heuristic measures indicate how promising is each edge before actually solving this TSP instance.
    
    Parameters
    ----------
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes), where diagonal elements are set to inf.
    
    Returns
    -------
    heuristics: np.ndarray
        The heuristic measures of shape (n_nodes, n_nodes) for all edges. 
    """
    n_nodes = distance_matrix.shape[0]
    heuristics = np.random.random((n_nodes, n_nodes))
    
    return heuristics
```
