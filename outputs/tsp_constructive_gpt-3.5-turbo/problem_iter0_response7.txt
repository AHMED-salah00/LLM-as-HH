Code description: The code uses a novel constructive heuristic called "Furthest Neighbor". This heuristic selects the next node to visit based on the distance from the current node to each unvisited node. The node that is furthest from the current node is selected as the next node to visit.

```python
import numpy as np

def select_next_node(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """
    Select the next node to visit from the unvisited nodes using the Furthest Neighbor heuristic.
    
    Parameters
    ----------
    current_node : int
        The current node.
    destination_node : int
        The destination node to return to.
    unvisited_nodes : set
        The set of unvisited nodes.
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes).
    
    Returns
    -------
    nxt_node : int
        The next node to visit.
    """
    # Calculate the distances from the current node to each unvisited node
    distances = distance_matrix[current_node, list(unvisited_nodes)]
    
    # Find the index of the node that is furthest from the current node
    furthest_node_index = np.argmax(distances)
    
    # Get the corresponding node number
    furthest_node = list(unvisited_nodes)[furthest_node_index]
    
    return furthest_node
```

