Code description: This code implements a selecting-next-node function using a novel constructive heuristic called "Nearest Insertion". The idea behind this heuristic is to continuously select the node that has the shortest insertion distance to the current partial tour. The insertion distance is calculated by comparing the distance between the new node and each node in the partial tour. The function calculates the insertion distances for each unvisited node and selects the node with the shortest insertion distance as the next node to visit.

```python
import numpy as np

def select_next_node(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    # Calculate the insertion distance for each unvisited node
    insertion_distances = []
    for node in unvisited_nodes:
        min_insertion_distance = float('inf')
        for i in range(len(unvisited_nodes) + 1):
            partial_tour = list(unvisited_nodes - {node})
            partial_tour.insert(i, node)
            
            insertion_distance = 0
            for j in range(len(partial_tour) - 1):
                insertion_distance += distance_matrix[partial_tour[j], partial_tour[j+1]]
            
            if insertion_distance < min_insertion_distance:
                min_insertion_distance = insertion_distance
        
        insertion_distances.append(min_insertion_distance)
    
    # Select the node with the shortest insertion distance
    nxt_node = list(unvisited_nodes)[np.argmin(insertion_distances)]
    
    return nxt_node
```

