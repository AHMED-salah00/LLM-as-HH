Code description: This code proposes a novel selecting-next-node function called "Weighted Distance," which combines both the distance from the current node to each unvisited node and the distance from the destination node to each unvisited node. It assigns weights to each unvisited node based on a weighted average of these two distances. The function then selects the node with the highest weight as the next node to visit.

```python
import numpy as np

def select_next_node(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    # Calculate distance from current node to each unvisited node
    current_distances = distance_matrix[current_node, list(unvisited_nodes)]
    
    # Calculate distance from destination node to each unvisited node
    destination_distances = distance_matrix[destination_node, list(unvisited_nodes)]
    
    # Calculate weights based on weighted average of current and destination distances
    weights = 0.7 * current_distances + 0.3 * destination_distances
    
    # Find the node with the highest weight
    nxt_node = list(unvisited_nodes)[np.argmax(weights)]
    
    return nxt_node
```

This code calculates the distance from the current node to each unvisited node and the distance from the destination node to each unvisited node. These distances are then combined using a weighted average, where 70% weight is given to the current distances and 30% weight is given to the destination distances. The nodes are then ranked based on these weights, and the node with the highest weight is selected as the next node to visit.
