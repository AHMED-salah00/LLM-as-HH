Code description: 
This scoring function assigns heuristic measures to each edge based on the distance between nodes. Shorter distances are given higher measures, indicating that edges with shorter distances are more likely to be part of the optimal solution.

The code calculates the inverse of each distance value in the distance matrix and then normalizes the values between 0 and 1 by dividing each measure by the sum of all measures.

```python
import numpy as np

def scoring_function(distance_matrix: np.ndarray) -> np.ndarray:
    """
    The heuristic measures indicate how promising is each edge before actually solving this TSP instance.
    
    Parameters
    ----------
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes), where diagonal elements are set to inf.
    
    Returns
    -------
    heuristics: np.ndarray
        The heuristic measures of shape (n_nodes, n_nodes) for all edges. 
    """
    
    # Calculate the inverse of each distance value
    inverse_distances = 1 / distance_matrix
    
    # Set diagonal elements to 0
    np.fill_diagonal(inverse_distances, 0)
    
    # Calculate the sum of all inverse distances
    total_sum = np.sum(inverse_distances)
    
    # Normalize the inverse distances between 0 and 1
    heuristics = inverse_distances / total_sum
    
    return heuristics
```
