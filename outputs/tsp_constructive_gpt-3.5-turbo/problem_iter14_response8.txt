Code description: The proposed crossover algorithm aims to combine the advantages of both Algorithm 1 and Algorithm 2 while adding a new approach to selecting the next node. This algorithm considers the distance from the current node to the unvisited nodes, the distance from the unvisited nodes to the destination node, the modified Greedy Squeezing distance, and the Neighbor Distance. Additionally, it introduces a new measure called "Node Priority" which is calculated based on the importance of each unvisited node. The algorithm calculates a score for each unvisited node by combining all these factors and selects the node with the highest score as the next node to visit.

```python
import numpy as np

def select_next_node(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    # Calculate distance from current node to each unvisited node
    current_distances = distance_matrix[current_node, list(unvisited_nodes)]
    
    # Calculate distance from destination node to each unvisited node
    destination_distances = distance_matrix[destination_node, list(unvisited_nodes)]
    
    # Calculate modified Greedy Squeezing distance for each unvisited node
    mgs_distance = {}
    for node in unvisited_nodes:
        direct_distance = distance_matrix[current_node, destination_node]
        node_distance = distance_matrix[current_node, node]
        
        # Calculate the weight based on the number of neighboring unvisited nodes
        weight = 1
        for neighbor in unvisited_nodes:
            if neighbor != node and neighbor in distance_matrix[node]:
                weight += 1

        mgs_distance[node] = direct_distance / (node_distance * weight)
        
    # Calculate Neighbor Distance for each unvisited node
    neighbor_distance = {}
    for node in unvisited_nodes:
        neighbor_distances = distance_matrix[node, list(unvisited_nodes - set([node]))]
        neighbor_distance[node] = np.mean(neighbor_distances)
    
    # Calculate Node Priority for each unvisited node
    node_priority = {}
    for node in unvisited_nodes:
        node_priority[node] = np.sum(distance_matrix[node]) / len(unvisited_nodes)
    
    # Calculate combined scores for each unvisited node
    combined_scores = 0.4 * current_distances + 0.3 * destination_distances + 0.3 * np.array(list(mgs_distance.values())) + 0.2 * np.array(list(neighbor_distance.values())) + 0.1 * np.array(list(node_priority.values()))
    
    # Find the node with the highest combined score
    nxt_node = list(unvisited_nodes)[np.argmax(combined_scores)]
    
    return nxt_node
```

