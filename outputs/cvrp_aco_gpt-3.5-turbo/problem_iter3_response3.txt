Code description: 
The novel scoring function takes into account the distance, demand, and feasibility factors to assign heuristic measures to each edge. It considers the edge distance normalized by the maximum distance, the demand normalized by the maximum demand, and the demand-to-capacity ratio. The idea is to prioritize edges that are closer to the depot, have a high demand, and are within the vehicle capacity. The heuristic measure is calculated as the product of these factors.

```python
import numpy as np

def scoring_function(distance_matrix: np.ndarray, demands: np.ndarray, CAPACITY: int) -> np.ndarray:
    n_nodes = distance_matrix.shape[0]
    
    # Initialize heuristics matrix
    heuristics = np.zeros((n_nodes, n_nodes))
    
    # Maximum values for normalization
    max_distance = np.max(distance_matrix)
    max_demand = np.max(demands[1:])
    
    # Calculate the demand-to-capacity ratio
    demand_to_capacity = demands / CAPACITY
    
    # Calculate the normalized distance and demand
    normalized_distance = distance_matrix / max_distance
    normalized_demand = demands / max_demand
    
    # Calculate heuristic measures for each edge
    for i in range(n_nodes):
        for j in range(i+1, n_nodes):
            # Calculate the heuristic measure as the product of the factors
            score = normalized_distance[i, j] * normalized_demand[j] * (1 - demand_to_capacity[j])
            heuristics[i, j] = score
    
    # Symmetrically set heuristics for the lower triangle of the matrix
    heuristics += np.tril(heuristics.T, -1)
    
    return heuristics
```

