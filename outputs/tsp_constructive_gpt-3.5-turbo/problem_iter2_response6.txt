Code description: In this code, I will design a novel selecting-next-node function for the TSP. The function will select the next node to visit based on a combination of the distance from the current node to each unvisited node and the distance from each unvisited node to the destination node. The function will prioritize visiting nodes that have a shorter distance from the current node and are closer to the destination node.

```python
def select_next_node(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """
    Select the next node to visit from the unvisited nodes.
    
    Parameters
    ----------
    current_node : int
        The current node.
    destination_node : int
        The destination node to return to.
    unvisited_nodes : set
        The set of unvisited nodes.
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes).
    
    Returns
    -------
    nxt_node : int
        The next node to visit.
    """
    
    # Create a list of unvisited nodes excluding the destination node
    unvisited_nodes = list(unvisited_nodes - {destination_node})
    
    # Calculate the distance from the current node to each unvisited node
    distances_current = distance_matrix[current_node][unvisited_nodes]
    
    # Calculate the distance from each unvisited node to the destination node
    distances_destination = distance_matrix[unvisited_nodes][:, destination_node]
    
    # Calculate the score for each unvisited node based on the combination of distances
    scores = distances_current / distances_destination
    
    # Select the node with the highest score as the next node to visit
    nxt_node = unvisited_nodes[np.argmax(scores)]
    
    return nxt_node
```

Explanation:
- First, we create a list of unvisited nodes excluding the destination node.
- Then, we calculate the distance from the current node to each unvisited node.
- We also calculate the distance from each unvisited node to the destination node.
- Finally, we calculate a score for each unvisited node based on the combination of distances, and select the node with the highest score as the next node to visit.
