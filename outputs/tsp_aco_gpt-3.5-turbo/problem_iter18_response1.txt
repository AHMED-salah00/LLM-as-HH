Code description: In this improved scoring function, I will incorporate the idea of edge attractiveness to prioritize edges between nodes with higher attractiveness values. The attractiveness of an edge will be calculated based on the inverse distance between nodes and the number of connections of the destination node. The inverse distance will be multiplied by a factor that increases with the number of connections of the destination node. This way, edges between nodes with shorter distances and fewer connections will be considered more attractive.

```python
import numpy as np

def scoring_function(distance_matrix: np.ndarray) -> np.ndarray:
    """
    The heuristic measures indicate how promising is each edge before actually solving this TSP instance.
    
    Parameters
    ----------
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes), where diagonal elements are set to inf.
    
    Returns
    -------
    heuristics: np.ndarray
        The heuristic measures of shape (n_nodes, n_nodes) for all edges. 
    """
    n_nodes = distance_matrix.shape[0]
    
    # Initialize the attractiveness matrix
    attractiveness = np.zeros((n_nodes, n_nodes))
    
    # Calculate the attractiveness for each edge
    for i in range(n_nodes):
        for j in range(n_nodes):
            if i != j:
                attractiveness[i, j] = 1 / distance_matrix[i, j] * (1 + np.count_nonzero(distance_matrix[j]))
    
    # Normalize the attractiveness values so that they sum up to 1
    attractiveness /= np.sum(attractiveness)
    
    return attractiveness
```

