Code description: In this improved scoring function, I will modify the way the heuristic measures are calculated by considering a combination of the inverse distances and the number of connections. The heuristic measure of each edge will be computed as the sum of the inverse distance and the inverse number of connections of both the source and destination nodes. This will capture the importance of both distance and connectivity in determining the quality of each edge. Additionally, instead of normalizing the heuristic measures to sum up to 1, I will normalize them to range between 0 and 1.

I will also optimize the code by using numpy vectorization instead of nested loops to calculate the heuristic measures for each edge.

```python
import numpy as np

def scoring_function(distance_matrix: np.ndarray) -> np.ndarray:
    """
    The heuristic measures indicate how promising is each edge before actually solving this TSP instance.
    
    Parameters
    ----------
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes), where diagonal elements are set to inf.
    
    Returns
    -------
    heuristics: np.ndarray
        The heuristic measures of shape (n_nodes, n_nodes) for all edges. 
    """
    n_nodes = distance_matrix.shape[0]
    
    # Calculate the inverse distances
    inverse_distances = 1 / distance_matrix
    np.fill_diagonal(inverse_distances, 0)
    
    # Compute the node connections
    node_connections = np.sum(distance_matrix != np.inf, axis=1)
    
    # Calculate the heuristic measure for each edge
    heuristics = inverse_distances + 1 / (np.expand_dims(node_connections, axis=1) + np.expand_dims(node_connections, axis=0) + 2)
    
    # Normalize the heuristic measures to range between 0 and 1
    heuristics /= np.max(heuristics)
    
    return heuristics
```

This modified code calculates the heuristic measures for each edge in a more efficient manner using vectorization. It first calculates the inverse distances and fills the diagonal elements with 0. Then, it computes the node connections using the sum of the non-infinite elements in each row. Finally, it calculates the heuristic measure for each edge by adding the inverse distances with the inverse sum of node connections. The resulting heuristic measures are then normalized to range between 0 and 1.
