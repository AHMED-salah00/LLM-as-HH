Code description: In this code, we will propose a new heuristic for selecting the next node in the Traveling Salesman Problem (TSP) by considering the trade-off between distance and attractiveness. We will assign different weights to distance and attractiveness based on their importance, and select the node with the highest score as the next node to visit.

```python
import numpy as np

def select_next_node(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    # Initialize parameters
    alpha = 0.5  # Weight for distance
    beta = 0.5  # Weight for attractiveness

    # Calculate distances from current node to unvisited nodes
    distances = distance_matrix[current_node, list(unvisited_nodes)]

    # Calculate attractiveness of each unvisited node
    attractiveness = np.exp(-distances)  # Using exponential function to convert distance to attractiveness

    # Calculate node scores based on distance and attractiveness
    node_scores = alpha * distances + beta * attractiveness

    # Find the index of the node with the highest score
    max_score_idx = np.argmax(node_scores)

    # Find the corresponding node with the highest score
    nxt_node = list(unvisited_nodes)[max_score_idx]

    return nxt_node
```
This new heuristic assigns weights to distance and attractiveness based on their relative importance. The distance is calculated using the distance matrix, and then converted to attractiveness using an exponential function. The node scores are computed based on the weighted sum of distance and attractiveness. The node with the highest score is selected as the next node to visit.
