Code description: The proposed crossover algorithm combines the advantages of Algorithm 1 and Algorithm 2. It incorporates the modified Greedy Squeezing distance and Neighbor Distance measures from Algorithm 1, and also considers the distance from the current node to the unvisited nodes and the distance from the unvisited nodes to the destination node from Algorithm 2. The algorithm calculates a score for each unvisited node, considering all these factors, and selects the node with the highest score as the next node to visit.

```python
import numpy as np

def select_next_node(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    # Calculate distance from the current node to each unvisited node
    current_distances = distance_matrix[current_node, list(unvisited_nodes)]
    
    # Calculate distance from the unvisited nodes to the destination node
    destination_distances = distance_matrix[list(unvisited_nodes)][:, destination_node]
    
    # Calculate modified Greedy Squeezing distance for each unvisited node
    mgs_distance = {}
    for node in unvisited_nodes:
        direct_distance = distance_matrix[current_node, destination_node]
        node_distance = distance_matrix[current_node, node]
        
        # Calculate the weight based on the number of neighboring unvisited nodes
        weight = 1
        for neighbor in unvisited_nodes:
            if neighbor != node and neighbor in distance_matrix[node]:
                weight += 1

        mgs_distance[node] = direct_distance / (node_distance * weight)
        
    # Calculate Neighbor Distance for each unvisited node
    neighbor_distance = {}
    for node in unvisited_nodes:
        neighbor_distances = distance_matrix[node, list(unvisited_nodes - set([node]))]
        neighbor_distance[node] = np.mean(neighbor_distances)
        
    # Calculate combined scores for each unvisited node
    combined_scores = 0.5 * current_distances + 0.4 * np.array(list(mgs_distance.values())) + 0.3 * destination_distances + 0.2 * np.array(list(neighbor_distance.values()))
    
    # Find the node with the highest combined score
    nxt_node = list(unvisited_nodes)[np.argmax(combined_scores)]
    
    return nxt_node
```
