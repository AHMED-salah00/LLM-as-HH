Code description: 

The scoring function calculates a heuristic measure for each edge of the graph based on the distance between the nodes and their demands. It aims to prioritize edges that lead to shorter paths or nodes with higher demand. The heuristic measure is calculated as the product of the normalized distance and the normalized demand ratio. The normalization is done by dividing the values by their maximum possible values.

```python
import numpy as np

def scoring_function(distance_matrix, demands, CAPACITY):
    n_nodes = distance_matrix.shape[0]
    
    max_distance = np.max(distance_matrix)
    max_demand = np.max(demands[1:])
    
    heuristics = np.zeros((n_nodes, n_nodes))
    
    for i in range(1, n_nodes):
        for j in range(1, n_nodes):
            if i == j:
                continue
            
            distance = distance_matrix[i, j]
            demand_ratio = demands[j] / CAPACITY
            
            normalized_distance = distance / max_distance
            normalized_demand_ratio = demand_ratio / max_demand
            
            heuristics[i, j] = normalized_distance * normalized_demand_ratio
    
    return heuristics
```
