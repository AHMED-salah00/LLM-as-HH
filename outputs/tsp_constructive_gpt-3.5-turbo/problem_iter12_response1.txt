Code description: The proposed algorithm selects the next node based on a combination of the distance to the node and the number of unvisited neighbors. It calculates a score for each unvisited node using these factors and selects the node with the highest score as the next node to visit.

```python
import numpy as np

def select_next_node(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    # Initialize variables
    max_score = -np.inf
    nxt_node = None
    
    # Calculate the score for each unvisited node
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        num_unvisited_neighbors = np.sum(distance_matrix[node,:] > 0)
        score = distance - 0.5 * num_unvisited_neighbors
        
        if score > max_score:
            max_score = score
            nxt_node = node
    
    return nxt_node
```
Note: The code has been modified from Algorithm 1 to remove the calculation of the degree and uncertainty scores, as they are not used in the selection process. Only the distance and the number of unvisited neighbors are considered in the scoring.
