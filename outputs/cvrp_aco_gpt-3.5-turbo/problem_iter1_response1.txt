Code description: 
This code implements a novel scoring function that calculates the heuristic measure for each edge based on the distance and demand of the nodes connected by the edge. The scoring function aims to prioritize edges that lead to shorter paths or nodes with higher demand. The heuristic measure is calculated as the sum of the normalized distance and the normalized demand ratio.

```python
import numpy as np

def scoring_function(distance_matrix: np.ndarray, demands: np.ndarray, CAPACITY: int) -> np.ndarray:
    n_nodes = distance_matrix.shape[0]

    max_distance = np.max(distance_matrix)
    max_demand = np.max(demands[1:])

    heuristics = np.zeros((n_nodes, n_nodes))

    for i in range(n_nodes):
        for j in range(n_nodes):
            if i != j:
                distance = distance_matrix[i, j]
                demand_ratio = demands[j] / CAPACITY

                normalized_distance = distance / max_distance
                normalized_demand_ratio = demand_ratio / max_demand

                heuristics[i, j] = normalized_distance + normalized_demand_ratio

    return heuristics
```

The code first calculates the maximum distance and the maximum demand ratio in the dataset. It then initializes an empty array for the heuristic measures. Next, it iterates over all pairs of nodes (i, j) and calculates the heuristic measure for the edge connecting these nodes. For each edge, the code calculates the normalized distance as the distance divided by the maximum distance, and the normalized demand ratio as the demand ratio divided by the maximum demand ratio. The heuristic measure for each edge is then calculated as the sum of the normalized distance and the normalized demand ratio. Finally, the resulting heuristic measures are returned as an array.
