Code description: 
The improved scoring function focuses on capturing the local properties of the TSP instance, specifically the node degree and hop count. It computes the node degree and uses the inverse of the hop count to capture the importance of each edge. Additionally, it normalizes the heuristic measures to have values between 0 and 1.

```python
import numpy as np
import networkx as nx

def scoring_function(distance_matrix: np.ndarray) -> np.ndarray:
    """
    The heuristic measures indicate how promising is each edge before actually solving this TSP instance.
    
    Parameters
    ----------
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes), where diagonal elements are set to inf.
    
    Returns
    -------
    heuristics: np.ndarray
        The heuristic measures of shape (n_nodes, n_nodes) for all edges. 
    """
    
    n_nodes = distance_matrix.shape[0]
    
    # Compute the inverse of the distance matrix
    inverse_distance_matrix = np.where(distance_matrix != 0, 1 / distance_matrix, 0)
    
    # Compute the degree of each node
    node_degrees = np.count_nonzero(distance_matrix, axis=1)
    
    # Compute the hop count between nodes
    hop_count = np.zeros((n_nodes, n_nodes), dtype=int)
    
    # Construct the graph using distance matrix
    graph = nx.from_numpy_matrix(distance_matrix, create_using=nx.Graph)
    
    # Calculate shortest path lengths using networkx library
    path_lengths = dict(nx.all_pairs_shortest_path_length(graph))
    
    # Compute the hop count
    for i in range(n_nodes):
        for j in range(n_nodes):
            hop_count[i, j] = path_lengths[i][j]
    
    # Compute the inverse of hop count
    inverse_hop_count = np.where(hop_count != 0, 1 / hop_count, 0)
    
    # Multiply inverse_hop_count with node_degrees for each edge
    edge_scores = np.repeat(inverse_hop_count[:, np.newaxis], n_nodes, axis=1) * node_degrees
    
    # Normalize the edge_scores to have values between 0 and 1
    heuristics = edge_scores / np.max(edge_scores)
    
    return heuristics
```
