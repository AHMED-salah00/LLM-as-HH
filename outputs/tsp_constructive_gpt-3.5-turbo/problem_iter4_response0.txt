Code description: The code implements a novel heuristic called Weighted Distance and Degree with Average Distance. This heuristic selects the next node to visit based on a combination of the weighted distance from the current node to each unvisited node and the average distance from each unvisited node to all other unvisited nodes. The node with the highest score, calculated based on this combination, is selected as the next node to visit.

```python
import numpy as np

def select_next_node(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """
    Select the next node to visit from the unvisited nodes using a combination of weighted distances and average distance.
    
    Parameters
    ----------
    current_node : int
        The current node.
    destination_node : int
        The destination node to return to.
    unvisited_nodes : set
        The set of unvisited nodes.
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes).
    
    Returns
    -------
    nxt_node : int
        The next node to visit.
    """
    
    n_nodes = len(distance_matrix)
    
    # Calculate the degree for each unvisited node
    degree = np.zeros(n_nodes)
    for node in unvisited_nodes:
        degree[node] = np.sum(distance_matrix[node,:] > 0)
    
    # Calculate the weighted distances from the current node to each unvisited node
    weighted_distances = np.zeros(n_nodes)
    for node in unvisited_nodes:
        weighted_distances[node] = distance_matrix[current_node, node] * degree[node]
    
    # Compute the average distance from each unvisited node to all other unvisited nodes
    avg_distances = np.mean(distance_matrix[list(unvisited_nodes)][:, list(unvisited_nodes)], axis=1)

    # Calculate a score for each unvisited node based on the combination of weighted distances and average distance
    scores = weighted_distances / avg_distances * weighted_distances
    
    # Select the node with the highest score as the next node to visit
    nxt_node = np.argmax(scores)
    
    return nxt_node
```
