Code description: In this modified scoring function, I will introduce a new metric called "betweenness centrality" to improve the accuracy of the heuristic measures. Betweenness centrality measures the importance of a node by quantifying how often it appears on the shortest paths between other nodes. By incorporating betweenness centrality into the existing measures, we can capture not only the direct connectivity of nodes but also their influence on the overall connectivity of the graph.

```python
import numpy as np
import networkx as nx

def scoring_function(distance_matrix: np.ndarray) -> np.ndarray:
    """
    The heuristic measures indicate how promising is each edge before actually solving this TSP instance.

    Parameters
    ----------
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes), where diagonal elements are set to inf.

    Returns
    -------
    heuristics: np.ndarray
        The heuristic measures of shape (n_nodes, n_nodes) for all edges.
    """
    n_nodes = distance_matrix.shape[0]

    # Create a graph from the distance matrix
    G = nx.from_numpy_array(distance_matrix)

    # Compute the inverse distances
    inverse_distances = 1 / distance_matrix
    np.fill_diagonal(inverse_distances, 0)

    # Compute the degree centrality of each node
    degree_centrality = np.sum(inverse_distances, axis=0) / np.sum(inverse_distances)

    # Compute the total centrality of each node
    total_centrality = np.sum(inverse_distances, axis=1) / np.sum(inverse_distances)

    # Compute the betweenness centrality of each node
    betweenness_centrality = nx.betweenness_centrality(G)

    # Compute the edge importance measure
    edge_importance = inverse_distances * (np.sum(inverse_distances) - 1) / (inverse_distances.shape[0] * (np.sum(inverse_distances) - 2))

    # Compute the combined heuristic measures
    heuristics = edge_importance * degree_centrality * total_centrality[:, np.newaxis] * betweenness_centrality[:, np.newaxis]

    # Normalize the heuristic measures so that they sum up to 1
    heuristics /= np.sum(heuristics)

    return heuristics
```

