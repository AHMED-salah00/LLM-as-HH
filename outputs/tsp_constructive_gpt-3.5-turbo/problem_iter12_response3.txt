Code description: In this code, I propose a novel algorithm that selects the next node based on a combination of the Modified Greedy Squeezing (MGS) distance and the distance from the current node to the destination node. The goal is to choose a node that has a balance between being close to the current node, having a low MGS distance, and being closer to the destination node.

First, we calculate the MGS distance for each unvisited node by dividing the direct distance from the current node to the destination node by the product of the distance from the current node to the unvisited node and the number of neighboring unvisited nodes.

Next, we calculate the score for each unvisited node by multiplying the MGS distance by the inverse of the distance from the current node to the destination node. This score reflects the balance between the MGS distance and the direct distance to the destination node.

Finally, we select the node with the highest score as the next node to visit and return it.

```python
import numpy as np

def select_next_node(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """
    Select the next node to visit from the unvisited nodes.
    
    Parameters
    ----------
    current_node : int
        The current node.
    destination_node : int
        The destination node to return to.
    unvisited_nodes : set
        The set of unvisited nodes.
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes).
    
    Returns
    -------
    nxt_node : int
        The next node to visit.
    """
    direct_distance = distance_matrix[current_node][destination_node]
    
    mgs_distance = {}
    
    for node in unvisited_nodes:
        node_distance = distance_matrix[current_node][node]
        
        weight = 1
        for neighbor in unvisited_nodes:
            if neighbor != node and neighbor in distance_matrix[node]:
                weight += 1
        
        mgs_distance[node] = direct_distance / (node_distance * weight)
    
    scores = {}
    for node in unvisited_nodes:
        scores[node] = mgs_distance[node] / distance_matrix[current_node][node]
    
    nxt_node = max(scores, key=scores.get)

    return nxt_node
```
