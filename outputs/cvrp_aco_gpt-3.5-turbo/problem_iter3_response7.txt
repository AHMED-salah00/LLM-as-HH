Code description: 
In the improved scoring function, I will consider the distance and demand factors as well as the remaining capacity of the vehicle. I will modify the weight coefficients for distance, demand, and remaining capacity to find a better balance. The heuristic measure for each edge will be a weighted sum of these factors. If the demand ratio exceeds 1, indicating that the demand exceeds the vehicle capacity, the heuristic measure will be set to a very low value. I will initialize the heuristics matrix outside of the loop to improve efficiency.

```python
import numpy as np

def scoring_function(distance_matrix: np.ndarray, demands: np.ndarray, CAPACITY: int) -> np.ndarray:
    n_nodes = distance_matrix.shape[0]
    
    max_distance = np.max(distance_matrix)
    
    heuristics = np.zeros((n_nodes, n_nodes))
    
    # Set weight coefficients for distance, demand, and remaining capacity
    distance_weight = 0.5
    demand_weight = 0.4
    capacity_weight = 0.1
    
    for i in range(1, n_nodes):
        for j in range(i + 1, n_nodes):
            distance = distance_matrix[i, j]
            demand_ratio = demands[j] / CAPACITY
            remaining_capacity = CAPACITY - demands[j]
            
            if demand_ratio > 1:
                heuristics[i, j] = -max_distance
            else:
                heuristics[i, j] = distance_weight * distance + demand_weight * demand_ratio + capacity_weight * remaining_capacity
            
            # Symmetrically set heuristics for the lower triangle of the matrix
            heuristics[j, i] = heuristics[i, j]
    
    return heuristics
```
