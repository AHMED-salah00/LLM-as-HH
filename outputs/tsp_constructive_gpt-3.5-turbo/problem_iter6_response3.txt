Code description: 
The proposed code aims to design a novel heuristic for selecting the next node to visit. The code considers the distance between the current node and each unvisited node, similar to Algorithm 2. Additionally, it incorporates an element of randomness by randomly selecting multiple nodes with the minimum increase in total distance and then selecting the node that is closest to the current node.

```python
import numpy as np

def select_next_node(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    # Initialize variables
    min_increase = np.inf
    min_distance = np.inf
    selected_nodes = []
    
    # Iterate over unvisited nodes
    for node in unvisited_nodes:
        # Calculate the increase in distance if node is selected
        increase = distance_matrix[current_node, node] + distance_matrix[node, destination_node] - distance_matrix[current_node, destination_node]
        
        # If the increase is smaller or if the increase is the same but the distance is shorter
        if increase < min_increase:
            min_increase = increase
            selected_nodes = [node]
            min_distance = distance_matrix[current_node, node]
        elif increase == min_increase:
            if distance_matrix[current_node, node] < min_distance:
                selected_nodes = [node]
                min_distance = distance_matrix[current_node, node]
            elif distance_matrix[current_node, node] == min_distance:
                selected_nodes.append(node)
    
    nxt_node = np.random.choice(selected_nodes)
    return nxt_node
```

