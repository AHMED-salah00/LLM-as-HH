### Improved Scoring Function ###

Code description: In this improved scoring function, I will modify the scoring function by incorporating both the distance and connectivity information between nodes. The scoring function will consider the inverse distances between nodes, but instead of using only the destination node's degree and common neighbors, it will consider the sum of the degrees of the source and destination nodes, as well as the number of common neighbors between them. The heuristic measure for each edge will be the product of the inverse distance and the inverse sum of degrees, divided by the inverse number of common neighbors plus one. This way, the scoring function will prioritize edges that have a small distance, low connectivity of both source and destination nodes, and a small number of common neighbors between them.

```python
import numpy as np
import networkx as nx

def scoring_function(distance_matrix: np.ndarray) -> np.ndarray:
    """
    The heuristic measures indicate how promising is each edge before actually solving this TSP instance.
    
    Parameters
    ----------
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes), where diagonal elements are set to inf.
    
    Returns
    -------
    heuristics: np.ndarray
        The heuristic measures of shape (n_nodes, n_nodes) for all edges. 
    """
    n_nodes = distance_matrix.shape[0]
    
    # Calculate the inverse distances
    inverse_distances = 1 / distance_matrix
    np.fill_diagonal(inverse_distances, 0)
    
    # Calculate the connectivity information
    connectivity = np.zeros((n_nodes, n_nodes))
    degrees = np.sum(distance_matrix > 0, axis=1)
    for i in range(n_nodes):
        for j in range(n_nodes):
            common_neighbors = len(set(np.where(distance_matrix[i] > 0)[0]) & set(np.where(distance_matrix[j] > 0)[0]))
            connectivity[i, j] = (1 / ((degrees[i] + degrees[j]) * (common_neighbors + 1)))
    
    # Calculate the heuristics
    heuristics = inverse_distances * connectivity
    
    # Normalize the heuristic measures so that they sum up to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```

The improved scoring function incorporates the inverse distance and connectivity information between nodes. It calculates the inverse distances using the given distance matrix, where the diagonal elements are set to infinity.

To calculate the connectivity information, the function calculates the degrees of the nodes by counting the number of non-zero entries in each row of the distance matrix. Then, for each pair of nodes, it calculates the number of common neighbors by finding the set intersection of the non-zero entries in the corresponding rows of the distance matrix. The inverse sum of degrees and inverse number of common neighbors plus one are used to calculate the connectivity values.

The heuristics are calculated by multiplying the inverse distances and connectivity values. Finally, the heuristics are normalized by dividing them by their sum to ensure that they sum up to 1.

Note: The improved scoring function assumes that the distance matrix represents a fully connected graph, where the diagonal elements are set to infinity. If the input distance matrix represents a sparse graph, additional modifications may be required.
