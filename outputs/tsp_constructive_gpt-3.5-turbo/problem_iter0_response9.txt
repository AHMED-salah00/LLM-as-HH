Code description: This code uses a novel algorithm called "Closest Insertion" to select the next node in the Traveling Salesman Problem.

1. Start by randomly selecting a current node from the unvisited nodes.
2. Create a loop that iterates until all nodes have been visited.
3. Inside the loop, initialize a variable `min_distance` to a large value and set `nxt_node` to None.
4. For each node `i` in the unvisited nodes, calculate the distance from the current node to node `i`.
5. If the calculated distance is smaller than `min_distance`, update `min_distance` and set `nxt_node` to node `i`.
6. After iterating through all nodes, return `nxt_node` as the next node to visit.

```python
import numpy as np

def select_next_node(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """
    Select the next node to visit from the unvisited nodes using Closest Insertion algorithm.
    
    Parameters
    ----------
    current_node : int
        The current node.
    destination_node : int
        The destination node to return to.
    unvisited_nodes : set
        The set of unvisited nodes.
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes).
    
    Returns
    -------
    nxt_node : int
        The next node to visit.
    """
    min_distance = float('inf')
    nxt_node = None
    
    for i in unvisited_nodes:
        distance = distance_matrix[current_node, i]
        if distance < min_distance:
            min_distance = distance
            nxt_node = i
    
    return nxt_node
```
Note: This algorithm selects the next node by choosing the one with the smallest distance from the current node. This approach ensures that the path selected is based on the shortest distances available at each step, regardless of the starting point.
