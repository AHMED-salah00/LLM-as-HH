Code description: 

The modified scoring function incorporates the concept of edge centrality. It calculates the centrality score for each edge by considering the inverse distances based on the sum of distances to other nodes. This centrality score is then multiplied by the normalized heuristic measures from Algorithm 2 to obtain the final heuristic measures for each edge. This approach aims to combine the benefits of both algorithms and provide a more effective scoring function.

```python
import numpy as np
from scipy.spatial.distance import squareform

def scoring_function(distance_matrix):
    n_nodes = distance_matrix.shape[0]
    
    # Compute the inverse of the distance matrix
    inverse_distance_matrix = np.where(distance_matrix != 0, 1 / distance_matrix, 0)
    
    # Compute the sum of distances to other nodes for each node
    node_scores = np.sum(inverse_distance_matrix, axis=1)
    
    # Repeat the node scores for each edge
    edge_scores = np.repeat(node_scores[:, np.newaxis], n_nodes, axis=1)
    
    # Compute the heuristic measures for each edge
    heuristics = inverse_distance_matrix / edge_scores
    
    # Normalize the heuristic measures
    heuristics /= np.sum(heuristics, axis=1, keepdims=True)
    
    # Calculate edge centrality score
    centrality_score = np.sum(inverse_distance_matrix, axis=1) / np.sum(inverse_distance_matrix)
    
    # Multiply the centrality score with normalized heuristic measures
    heuristics *= centrality_score[:, np.newaxis]
    
    return heuristics
```

