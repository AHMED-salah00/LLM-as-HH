Code description: The provided algorithms have different approaches to calculating the heuristic measures for each edge. In my improved algorithm, I will combine elements from both algorithms to create a scoring function that considers both the distance and demand of the nodes, prioritizing shorter paths and nodes with higher demands. Additionally, I will introduce a parameter to control the relative weights of distance and demand in the heuristic measures.

```python
import numpy as np

def scoring_function(distance_matrix: np.ndarray, demands: np.ndarray, CAPACITY: int) -> np.ndarray:
    n_nodes = distance_matrix.shape[0]
    
    max_distance = np.max(distance_matrix)
    max_demand = np.max(demands[1:])
    
    heuristics = np.zeros((n_nodes, n_nodes))
    
    alpha = 0.5  # Weight parameter for balancing distance and demand
    
    for i in range(n_nodes):
        for j in range(n_nodes):
            if i != j:
                distance = distance_matrix[i, j]
                demand_ratio = demands[j] / CAPACITY

                normalized_distance = distance / max_distance
                normalized_demand_ratio = demand_ratio / max_demand
                
                if i == 0:
                    heuristics[i, j] = alpha * normalized_distance + (1 - alpha) * demand_ratio
                elif j == 0:
                    heuristics[i, j] = alpha * normalized_distance + (1 - alpha) * normalized_demand_ratio
                else:
                    heuristics[i, j] = alpha * (normalized_distance + normalized_demand_ratio) / 2
    
    return heuristics
```
The improved scoring function combines elements from both algorithms. It calculates the heuristic measure for each edge considering the distance between the nodes and their demands. The weight parameter, alpha, determines the balance between distance and demand in the heuristic measures. If alpha is 0.0, only demand is considered, while if alpha is 1.0, only distance is considered. The parameter can be adjusted to prioritize either shorter paths or nodes with higher demands. The resulting heuristic measures are returned as an array.
