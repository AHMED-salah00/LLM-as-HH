Code description: In the improved scoring function, I will use a combination of the concepts used in Algorithm 1 and Algorithm 2 to assign heuristic measures to each edge. First, I will compute the shortest path lengths between all nodes using the Floyd-Warshall algorithm, similar to Algorithm 1. Then, I will calculate the node scores and node degrees, similar to Algorithm 2. Finally, I will combine these measures to compute the heuristic measures for each edge.

```python
import numpy as np

def scoring_function(distance_matrix: np.ndarray) -> np.ndarray:
    """
    The heuristic measures indicate how promising is each edge before actually solving this TSP instance.

    Parameters
    ----------
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes), where diagonal elements are set to inf.

    Returns
    -------
    heuristics: np.ndarray
        The heuristic measures of shape (n_nodes, n_nodes) for all edges.
    """

    n_nodes = distance_matrix.shape[0]

    # Compute the shortest path lengths between all nodes using Floyd-Warshall algorithm
    shortest_paths = np.copy(distance_matrix)
    for k in range(n_nodes):
        for i in range(n_nodes):
            for j in range(n_nodes):
                shortest_paths[i, j] = min(shortest_paths[i, j], shortest_paths[i, k] + shortest_paths[k, j])

    # Compute the node degrees
    node_degrees = np.count_nonzero(distance_matrix, axis=1)

    # Compute the node scores
    node_scores = np.sum(1 / shortest_paths, axis=1)

    # Calculate the heuristic measures
    heuristics = np.zeros((n_nodes, n_nodes))
    for i in range(n_nodes):
        for j in range(n_nodes):
            if i != j:
                heuristics[i, j] = (1 / shortest_paths[i, j]) * (1 / node_degrees[i]) * node_scores[i]

    return heuristics
```

This improved scoring function combines the edge centrality concept from Algorithm 1 and the node scores and node degrees from Algorithm 2. It first computes the shortest path lengths between all nodes using the Floyd-Warshall algorithm. Then, it calculates the node degrees and the node scores. Finally, it combines these measures to compute the heuristic measures for each edge. The heuristic measure for each edge is calculated as the product of the inverse of the shortest path length, the inverse of the node degree, and the node score.
