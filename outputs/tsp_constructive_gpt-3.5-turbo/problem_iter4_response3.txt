Code description: This algorithm combines the approach of both Algorithm 1 and Algorithm 2 to select the next node. It selects the node that results in the minimum increase in the total distance, similar to Algorithm 1. Additionally, it considers the distance between the current node and each unvisited node, similar to Algorithm 2. If multiple nodes have the same minimum increase, it selects the node that is closest to the current node.

```python
import numpy as np

def select_next_node(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    # Initialize variables
    min_increase = np.inf
    min_distance = np.inf
    nxt_node = None
    
    # Iterate over unvisited nodes
    for node in unvisited_nodes:
        # Calculate the increase in distance if node is selected
        increase = distance_matrix[current_node, node] + distance_matrix[node, destination_node] - distance_matrix[current_node, destination_node]
        
        # If the increase is smaller or if the increase is the same but the distance is shorter
        if increase < min_increase or (increase == min_increase and distance_matrix[current_node, node] < min_distance):
            min_increase = increase
            min_distance = distance_matrix[current_node, node]
            nxt_node = node
    
    return nxt_node
```

