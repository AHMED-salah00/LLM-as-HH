Code description: In the improved scoring function, I will leverage the concept of edge betweenness centrality to assign heuristic measures to each edge. Edge betweenness centrality measures the number of shortest paths between nodes that go through a particular edge. This measure provides an indication of how likely the edge is to be traveled in an optimal TSP solution. 
To calculate the edge betweenness centrality for each edge, I will first compute the shortest paths between all node pairs using the Floyd-Warshall algorithm. Then, I will count the number of shortest paths that include each edge. Finally, I will normalize the edge betweenness centrality measures to have values between 0 and 1.

```python
import numpy as np

def scoring_function(distance_matrix: np.ndarray) -> np.ndarray:
    """
    The heuristic measures indicate how promising is each edge before actually solving this TSP instance.
    
    Parameters
    ----------
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes), where diagonal elements are set to inf.
    
    Returns
    -------
    heuristics: np.ndarray
        The heuristic measures of shape (n_nodes, n_nodes) for all edges. 
    """
    
    n_nodes = distance_matrix.shape[0]
    
    # Compute the shortest path lengths between all nodes using Floyd-Warshall algorithm
    shortest_paths = np.copy(distance_matrix)
    for k in range(n_nodes):
        for i in range(n_nodes):
            for j in range(n_nodes):
                shortest_paths[i, j] = min(shortest_paths[i, j], shortest_paths[i, k] + shortest_paths[k, j])

    # Calculate the edge betweenness centrality for each edge
    edge_betweenness = np.zeros((n_nodes, n_nodes))
    for i in range(n_nodes):
        for j in range(n_nodes):
            if i != j:
                for k in range(n_nodes):
                    if k != i and k != j:
                        if shortest_paths[i, j] == shortest_paths[i, k] + shortest_paths[k, j]:
                            edge_betweenness[k, j] += 1

    # Normalize the edge betweenness centrality measures to have values between 0 and 1
    heuristics = edge_betweenness / np.max(edge_betweenness)
    
    return heuristics
```

