Code description: In this improved scoring function, I will consider the distance between each pair of nodes and the number of connections each node has. The heuristic measure for each edge will be the product of the inverse distance and the inverse of the number of connections of the destination node. The idea is to prioritize edges that have a close destination node with fewer connections, as they are more likely to be part of an optimal solution. I will normalize the heuristic measures so that they sum up to 1.

```python
import numpy as np

def scoring_function(distance_matrix: np.ndarray) -> np.ndarray:
    """
    The heuristic measures indicate how promising is each edge before actually solving this TSP instance.
    
    Parameters
    ----------
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes), where diagonal elements are set to inf.
    
    Returns
    -------
    heuristics: np.ndarray
        The heuristic measures of shape (n_nodes, n_nodes) for all edges. 
    """
    
    n_nodes = distance_matrix.shape[0]
    
    # Initialize the node connections matrix
    node_connections = np.zeros(n_nodes, dtype=int)
    
    # Count the number of connections for each node
    for i in range(n_nodes):
        node_connections[i] = np.count_nonzero(distance_matrix[i])
    
    # Initialize the heuristic measures matrix
    heuristics = np.zeros((n_nodes, n_nodes))
    
    # Calculate the heuristic measure for each edge
    for i in range(n_nodes):
        for j in range(n_nodes):
            if i != j:
                heuristics[i, j] = 1 / (distance_matrix[i, j] * (1 + node_connections[j]))
    
    # Normalize the heuristic measures so that they sum up to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```


