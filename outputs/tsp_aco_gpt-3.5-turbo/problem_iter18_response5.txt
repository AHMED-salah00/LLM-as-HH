Code description: The modified scoring function combines elements from Algorithm 1 and Algorithm 2 to create an improved heuristic measure. It considers the inverse distance between nodes, the degree centrality of the destination node, and the edge importance measure. In addition, it also incorporates the strength centrality of each node to further enhance the scoring.

The modified scoring function includes the following steps:
1. Compute the inverse of the distance matrix.
2. Compute the degree centrality of each node.
3. Compute the strength centrality of each node.
4. Compute the edge importance measure based on the inverse distance, degree centrality, and strength centrality.
5. Calculate the heuristic measures by combining the inverse distance matrix, the degree centrality, the strength centrality, and the edge importance.
6. Normalize the heuristic measures so that they sum up to 1.

```python
import numpy as np
import networkx as nx

def scoring_function(distance_matrix: np.ndarray) -> np.ndarray:
    """
    The heuristic measures indicate how promising is each edge before actually solving this TSP instance.
    
    Parameters
    ----------
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes), where diagonal elements are set to inf.
    
    Returns
    -------
    heuristics: np.ndarray
        The heuristic measures of shape (n_nodes, n_nodes) for all edges. 
    """
    n_nodes = distance_matrix.shape[0]
    
    # Compute the inverse of the distance matrix
    inverse_distance_matrix = np.where(distance_matrix != 0, 1 / distance_matrix, 0)
    
    # Compute the degree centrality of each node
    degree_centrality = np.sum(inverse_distance_matrix, axis=1) / (n_nodes - 1)
    
    # Compute the strength centrality of each node
    strength_centrality = np.sum(distance_matrix, axis=1) / (n_nodes - 1)
    
    # Compute the edge importance measure
    edge_importance = inverse_distance_matrix * degree_centrality[:, np.newaxis]
    
    # Calculate the heuristic measures
    heuristics = inverse_distance_matrix * degree_centrality[:, np.newaxis] * strength_centrality[:, np.newaxis] * edge_importance
    
    # Normalize the heuristic measures so that they sum up to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```

