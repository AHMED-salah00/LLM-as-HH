Code description: 
In this novelty scoring function, I will combine the features from both Algorithm 1 and Algorithm 2 to create a more effective scoring function. The new scoring function will consider the degree of nodes, the sum of distances to other nodes for each node, and the edge centrality measure. Additionally, I will normalize the heuristic measures to ensure that they are within a specific range. By incorporating these features, the novel scoring function will provide better estimates of the edge quality.

```python
import numpy as np

def scoring_function(distance_matrix: np.ndarray) -> np.ndarray:
    """
    The heuristic measures indicate how promising is each edge before actually solving this TSP instance.

    Parameters
    ----------
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes), where diagonal elements are set to inf.

    Returns
    -------
    heuristics: np.ndarray
        The heuristic measures of shape (n_nodes, n_nodes) for all edges. 
    """

    n_nodes = distance_matrix.shape[0]

    # Compute the inverse of the distance matrix
    inverse_distance_matrix = np.where(distance_matrix != 0, 1 / distance_matrix, 0)

    # Compute the degree of each node
    node_degrees = np.count_nonzero(distance_matrix, axis=1)

    # Compute the sum of distances to other nodes for each node
    node_scores = np.sum(inverse_distance_matrix, axis=1)

    # Compute the edge centrality measure
    edge_centrality = np.sum(inverse_distance_matrix, axis=1) / np.sum(inverse_distance_matrix)

    # Compute the heuristic measures
    heuristics = (edge_centrality[:, np.newaxis] * node_degrees[np.newaxis, :] * node_scores[np.newaxis, :]) / np.sum(inverse_distance_matrix)

    return heuristics
```

