Code description: In this improved scoring function, I will introduce a new approach to calculate the heuristic measures for each edge. The key idea is to consider the Euclidean distance between the nodes connected by the edge. By prioritizing edges that are short in Euclidean distance, we can guide the search towards more promising edges.

The steps involved in the scoring function are as follows:

1. Compute the Euclidean distance matrix based on the given distance matrix.
2. Obtain the maximum Euclidean distance in the matrix to determine the range.
3. Normalize the Euclidean distance matrix by dividing it by the maximum Euclidean distance.
4. Invert the normalized Euclidean distance matrix to obtain a measure of closeness for each edge.
5. Normalize the inverted Euclidean distance matrix so that it sums up to 1.
6. Return the inverted Euclidean distance matrix.

```python
import numpy as np

def scoring_function(distance_matrix: np.ndarray) -> np.ndarray:
    n_nodes = distance_matrix.shape[0]
    
    # Compute the Euclidean distance matrix
    euclidean_distance_matrix = np.sqrt(distance_matrix)
    
    # Obtain the maximum Euclidean distance
    max_distance = np.max(euclidean_distance_matrix)
    
    # Normalize the Euclidean distance matrix
    normalized_euclidean_distance_matrix = euclidean_distance_matrix / max_distance
    
    # Invert the normalized Euclidean distance matrix
    inverted_euclidean_distance_matrix = np.reciprocal(normalized_euclidean_distance_matrix)
    
    # Normalize the inverted Euclidean distance matrix
    inverted_euclidean_distance_matrix /= np.sum(inverted_euclidean_distance_matrix)
    
    return inverted_euclidean_distance_matrix
```

