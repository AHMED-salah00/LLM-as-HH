Code description: 

The improved scoring function aims to consider both the distance and demand of nodes in a more balanced way. Instead of simply calculating the ratio of demand to distance, the improved scoring function assigns a weight to each factor and combines them using a weighted average formula. The weights determine the importance of each factor in the overall scoring.

The improved scoring function initializes an empty array for the heuristic measures. It then iterates over all pairs of nodes (i, j) and calculates the heuristic measure for the edge connecting these nodes. For each edge, the heuristic measure is calculated as follows:
- If the edge connects the depot (node 0) to a customer node (i > 0), the heuristic measure is set to the weight of demand multiplied by the demand of the customer node, plus the weight of distance multiplied by the distance between the two nodes.
- If the edge connects two customer nodes (i > 0 and j > 0), the heuristic measure is set to the weight of demand multiplied by the sum of the demands of the two nodes, plus the weight of distance multiplied by the distance between the two nodes.

The resulting heuristic measures are returned as an array.

```python
import numpy as np

def scoring_function(distance_matrix: np.ndarray, demands: np.ndarray, CAPACITY: int) -> np.ndarray:
    n_nodes = distance_matrix.shape[0]
    
    # Initialize heuristics matrix
    heuristics = np.zeros((n_nodes, n_nodes))
    
    # Set weight of demand and distance
    demand_weight = 0.5
    distance_weight = 0.5
    
    # Calculate heuristic measures for each edge
    for i in range(n_nodes):
        for j in range(i+1, n_nodes):
            distance = distance_matrix[i, j]
            demand_sum = demands[i] + demands[j]
            
            # Calculate heuristic measure
            if i == 0:
                heuristics[i, j] = demand_weight * demands[j] + distance_weight * distance
            else:
                heuristics[i, j] = demand_weight * demand_sum + distance_weight * distance
    
    # Symmetrically set heuristics for the lower triangle of the matrix
    heuristics += np.tril(heuristics.T, -1)
    
    return heuristics
```

