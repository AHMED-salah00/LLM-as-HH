Code description: 

This code implements a novel scoring function for the TSP problem. The scoring function computes the heuristic measures for all edges in the graph based on their distances in the distance matrix. The heuristic measure for each edge is calculated as the inverse of the distance between the nodes. This is done to prioritize edges that have shorter distances as they are more likely to be a part of the optimal solution. The resulting heuristic measures are returned as the output.

```python
import numpy as np

def scoring_function(distance_matrix: np.ndarray) -> np.ndarray:
    """
    The heuristic measures indicate how promising is each edge before actually solving this TSP instance.
    
    Parameters
    ----------
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes), where diagonal elements are set to inf.
    
    Returns
    -------
    heuristics: np.ndarray
        The heuristic measures of shape (n_nodes, n_nodes) for all edges. 
    """
    
    n_nodes = distance_matrix.shape[0]
    heuristics = np.zeros((n_nodes, n_nodes))
    
    for i in range(n_nodes):
        for j in range(n_nodes):
            if i != j:
                heuristics[i][j] = 1 / distance_matrix[i][j]
    
    return heuristics
```
