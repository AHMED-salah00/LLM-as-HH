Code description: The code implements a novel heuristic called "Weighted Distance and Degree with Exploration". This heuristic selects the next node to visit based on the distance from the current node to each unvisited node, weighted by the degree of each unvisited node. Additionally, it introduces an exploration factor to promote exploration of less visited nodes. The exploration factor is calculated by dividing the number of unvisited nodes by the sum of the degrees of all unvisited nodes. The selection of the next node takes into account both the weighted distance and the exploration factor.

```python
import numpy as np

def select_next_node(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """
    Select the next node to visit from the unvisited nodes using the Weighted Distance and Degree with Exploration heuristic.
    
    Parameters
    ----------
    current_node : int
        The current node.
    destination_node : int
        The destination node to return to.
    unvisited_nodes : set
        The set of unvisited nodes.
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes).
    
    Returns
    -------
    nxt_node : int
        The next node to visit.
    """
    
    n_nodes = len(distance_matrix)
    
    # Calculate the degree for each unvisited node
    degree = np.zeros(n_nodes)
    for node in unvisited_nodes:
        degree[node] = np.sum(distance_matrix[node,:] > 0)
    
    # Calculate the exploration factor
    exploration_factor = len(unvisited_nodes) / np.sum(degree)
    
    # Calculate the weighted distances from the current node to each unvisited node
    weighted_distances = np.zeros(n_nodes)
    for node in unvisited_nodes:
        weighted_distances[node] = distance_matrix[current_node, node] * degree[node]
    
    # Multiply the weighted distances by the exploration factor
    weighted_distances *= exploration_factor
    
    # Select the node with the highest weighted distance as the next node to visit
    nxt_node = np.argmax(weighted_distances)
    
    return nxt_node
```

