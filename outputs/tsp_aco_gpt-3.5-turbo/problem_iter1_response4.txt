Code description: 

To improve the scoring function, I will consider both the distance between nodes and the number of connections each node has. Nodes with more connections are more likely to be part of the optimal solution, so I will give them higher heuristic measures. I will calculate the heuristic measure for each edge by combining the inverse of the distance and the inverse of the number of connections. Finally, I will normalize the heuristic measures so that they sum up to 1.

```python
import numpy as np

def scoring_function(distance_matrix: np.ndarray) -> np.ndarray:
    """
    The heuristic measures indicate how promising is each edge before actually solving this TSP instance.
    
    Parameters
    ----------
    distance_matrix : np.ndarray
        The distance matrix of shape (n_nodes, n_nodes), where diagonal elements are set to inf.
    
    Returns
    -------
    heuristics: np.ndarray
        The heuristic measures of shape (n_nodes, n_nodes) for all edges. 
    """
    n_nodes = distance_matrix.shape[0]
    
    # Calculate the inverse of each distance value
    inverse_distances = 1 / distance_matrix
    
    # Set diagonal elements to 0
    np.fill_diagonal(inverse_distances, 0)
    
    # Calculate the sum of all inverse distances
    total_distance_sum = np.sum(inverse_distances)
    
    # Calculate the number of connections for each node
    connection_counts = np.count_nonzero(distance_matrix < np.inf, axis=1)
    
    # Calculate the inverse of each connection count value
    inverse_connections = 1 / connection_counts
    
    # Normalize the inverse connections between 0 and 1
    inverse_connections /= np.sum(inverse_connections)
    
    # Combine the inverse distances and inverse connections
    heuristics = inverse_distances + inverse_connections[:, np.newaxis]
    
    # Normalize the heuristic measures so that they sum up to 1
    heuristics /= np.sum(heuristics)
    
    return heuristics
```
