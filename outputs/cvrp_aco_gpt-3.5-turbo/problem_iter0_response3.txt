Code description: The scoring function calculates the heuristic measure for each edge based on the distance and demand of the nodes connected by the edge. The heuristic measure represents how promising each edge is in terms of constructing a feasible solution. 

The scoring function first initializes an empty array for the heuristic measures. It then iterates over all pairs of nodes (i, j) and calculates the heuristic measure for the edge connecting these nodes. For each edge, the heuristic measure is calculated as follows:
- If the edge connects the depot (node 0) to a customer node (i > 0), the heuristic measure is set to the ratio of the demand of the customer node to the vehicle capacity. This represents the proportion of the capacity that would be used if this edge is selected.
- If the edge connects two customer nodes (i > 0 and j > 0), the heuristic measure is set to the ratio of the sum of the demands of the two nodes to the vehicle capacity. This represents the proportion of the capacity that would be used if this edge is selected.

The resulting heuristic measures are returned as an array.

```python
import numpy as np

def scoring_function(distance_matrix: np.ndarray, demands: np.ndarray, CAPACITY: int) -> np.ndarray:
    n_nodes = distance_matrix.shape[0]

    heuristics = np.zeros((n_nodes, n_nodes))

    for i in range(n_nodes):
        for j in range(n_nodes):
            if i != j:
                demand_sum = demands[i] + demands[j]
                if i == 0:
                    heuristics[i, j] = demand_sum / CAPACITY
                elif j == 0:
                    heuristics[i, j] = demands[i] / CAPACITY
                else:
                    heuristics[i, j] = demand_sum / CAPACITY

    return heuristics
```
